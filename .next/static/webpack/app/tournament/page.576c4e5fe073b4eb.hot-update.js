"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tournament/page",{

/***/ "(app-pages-browser)/./types/tournament/matches.ts":
/*!*************************************!*\
  !*** ./types/tournament/matches.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   advanceToNextRound: function() { return /* binding */ advanceToNextRound; },\n/* harmony export */   createInitialRounds: function() { return /* binding */ createInitialRounds; },\n/* harmony export */   createMatch: function() { return /* binding */ createMatch; },\n/* harmony export */   updateMatchScore: function() { return /* binding */ updateMatchScore; }\n/* harmony export */ });\nconst createMatch = function(id, roundNumber, team1, team2) {\n    let isBye = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, bracket = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : \"winners\", nextMatchId = arguments.length > 6 ? arguments[6] : void 0, nextLoserMatchId = arguments.length > 7 ? arguments[7] : void 0;\n    var _ref;\n    return {\n        id,\n        roundNumber,\n        team1,\n        team2,\n        isCompleted: isBye,\n        isBye,\n        bracket,\n        winner: isBye ? (_ref = team1 !== null && team1 !== void 0 ? team1 : team2) !== null && _ref !== void 0 ? _ref : undefined : undefined,\n        loser: isBye ? undefined : undefined,\n        score: {\n            team1Score: 0,\n            team2Score: 0\n        },\n        nextMatchId,\n        nextLoserMatchId,\n        eliminatedLabel: undefined\n    };\n};\nconst createInitialRounds = (teams)=>{\n    const numTeams = teams.length;\n    const matches = [];\n    const numRounds = Math.ceil(Math.log2(numTeams));\n    const firstRoundMatches = Math.pow(2, numRounds - 1);\n    let matchCounter = 1;\n    for(let i = 0; i < firstRoundMatches; i++){\n        const team1 = teams[i * 2] || null;\n        const team2 = teams[i * 2 + 1] || null;\n        const isBye = !team1 || !team2;\n        const matchId = \"W1-\".concat(matchCounter);\n        const nextMatchId = \"W2-\".concat(Math.ceil(matchCounter / 2));\n        const nextLoserMatchId = \"L1-\".concat(Math.ceil(matchCounter / 2));\n        matches.push(createMatch(matchId, 1, team1, team2, isBye, \"winners\", nextMatchId, nextLoserMatchId));\n        matchCounter++;\n    }\n    return {\n        rounds: [\n            {\n                roundNumber: 1,\n                matches,\n                isDoubleElimination: true,\n                isChampionshipRound: false\n            }\n        ],\n        currentRound: 1,\n        eliminatedTeams: [],\n        championshipMatchesPlayed: 0\n    };\n};\nconst updateMatchScore = (match, newScore)=>{\n    const isCompleted = newScore.team1Score !== newScore.team2Score;\n    let winner = undefined;\n    let loser = undefined;\n    if (isCompleted) {\n        if (newScore.team1Score > newScore.team2Score) {\n            var _match_team1_wins, _match_team1_losses;\n            winner = match.team1 ? {\n                ...match.team1,\n                wins: ((_match_team1_wins = match.team1.wins) !== null && _match_team1_wins !== void 0 ? _match_team1_wins : 0) + 1,\n                losses: (_match_team1_losses = match.team1.losses) !== null && _match_team1_losses !== void 0 ? _match_team1_losses : 0\n            } : undefined;\n            var _match_team2_wins, _match_team2_losses;\n            loser = match.team2 ? {\n                ...match.team2,\n                wins: (_match_team2_wins = match.team2.wins) !== null && _match_team2_wins !== void 0 ? _match_team2_wins : 0,\n                losses: ((_match_team2_losses = match.team2.losses) !== null && _match_team2_losses !== void 0 ? _match_team2_losses : 0) + 1\n            } : undefined;\n        } else {\n            var _match_team2_wins1, _match_team2_losses1;\n            winner = match.team2 ? {\n                ...match.team2,\n                wins: ((_match_team2_wins1 = match.team2.wins) !== null && _match_team2_wins1 !== void 0 ? _match_team2_wins1 : 0) + 1,\n                losses: (_match_team2_losses1 = match.team2.losses) !== null && _match_team2_losses1 !== void 0 ? _match_team2_losses1 : 0\n            } : undefined;\n            var _match_team1_wins1, _match_team1_losses1;\n            loser = match.team1 ? {\n                ...match.team1,\n                wins: (_match_team1_wins1 = match.team1.wins) !== null && _match_team1_wins1 !== void 0 ? _match_team1_wins1 : 0,\n                losses: ((_match_team1_losses1 = match.team1.losses) !== null && _match_team1_losses1 !== void 0 ? _match_team1_losses1 : 0) + 1\n            } : undefined;\n        }\n    }\n    return {\n        ...match,\n        score: newScore,\n        isCompleted,\n        winner,\n        loser\n    };\n};\n// Helper to deduplicate teams by ID\nfunction dedupeTeams(teams) {\n    const seen = new Set();\n    return teams.filter((team)=>{\n        if (!team) return false;\n        if (seen.has(team.id)) return false;\n        seen.add(team.id);\n        return true;\n    });\n}\n// Helper: get all teams with exactly N losses\nfunction teamsWithLosses(lossCounts, n) {\n    return Object.keys(lossCounts).filter((teamId)=>lossCounts[teamId] === n);\n}\nconst advanceToNextRound = (tournament)=>{\n    const currentRound = tournament.rounds[tournament.rounds.length - 1];\n    const nextRoundNumber = tournament.currentRound + 1;\n    // Track all losses and wins across the tournament\n    const lossCounts = {};\n    const winsCounts = {};\n    tournament.rounds.forEach((round)=>{\n        round.matches.forEach((match)=>{\n            if (match.isCompleted && match.loser) {\n                lossCounts[match.loser.id] = (lossCounts[match.loser.id] || 0) + 1;\n            }\n            if (match.isCompleted && match.winner) {\n                winsCounts[match.winner.id] = (winsCounts[match.winner.id] || 0) + 1;\n            }\n        });\n    });\n    // Gather all teams ever in the tournament, attaching wins\n    const allTeams = [];\n    const teamIds = new Set();\n    for (const round of tournament.rounds){\n        for (const match of round.matches){\n            if (match.team1 && !teamIds.has(match.team1.id)) {\n                allTeams.push({\n                    ...match.team1,\n                    wins: winsCounts[match.team1.id] || 0,\n                    losses: lossCounts[match.team1.id] || 0\n                });\n                teamIds.add(match.team1.id);\n            }\n            if (match.team2 && !teamIds.has(match.team2.id)) {\n                allTeams.push({\n                    ...match.team2,\n                    wins: winsCounts[match.team2.id] || 0,\n                    losses: lossCounts[match.team2.id] || 0\n                });\n                teamIds.add(match.team2.id);\n            }\n        }\n    }\n    // Identify newly eliminated teams (2 losses)\n    const newlyEliminated = [];\n    for (const team of allTeams){\n        if ((lossCounts[team.id] || 0) >= 2 && !tournament.eliminatedTeams.some((t)=>t.id === team.id)) {\n            newlyEliminated.push(team);\n        }\n    }\n    // Winners: teams with 0 losses and not eliminated\n    const winnersBracketTeams = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 0 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id)).map((team)=>({\n            ...team,\n            losses: lossCounts[team.id] || 0,\n            wins: winsCounts[team.id] || 0\n        }));\n    // Losers: teams with 1 loss and not eliminated\n    const losersBracketTeams = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 1 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id)).map((team)=>({\n            ...team,\n            losses: lossCounts[team.id] || 0,\n            wins: winsCounts[team.id] || 0\n        }));\n    let isChampionshipRound = false;\n    let championshipMatches = [];\n    let nextRoundMatches = [];\n    const prevChampionshipMatches = tournament.rounds.filter((r)=>r.isChampionshipRound).flatMap((r)=>r.matches).filter((m)=>m.bracket === \"championship\");\n    // --- CHAMPIONSHIP LOGIC ---\n    // Check if a championship match already happened and was completed\n    if (prevChampionshipMatches.length >= 1 && prevChampionshipMatches[prevChampionshipMatches.length - 1].isCompleted) {\n        var _lastChampMatch_winner;\n        const lastChampMatch = prevChampionshipMatches[prevChampionshipMatches.length - 1];\n        const winnersBracketTeam = lastChampMatch.team1;\n        const losersBracketTeam = lastChampMatch.team2;\n        // If loser's bracket team won the first championship match, winner's bracket team gets another chance\n        if (((_lastChampMatch_winner = lastChampMatch.winner) === null || _lastChampMatch_winner === void 0 ? void 0 : _lastChampMatch_winner.id) === (losersBracketTeam === null || losersBracketTeam === void 0 ? void 0 : losersBracketTeam.id) && tournament.championshipMatchesPlayed === 1) {\n            isChampionshipRound = true;\n            // Create the \"reset\" match\n            championshipMatches.push(createMatch(\"C\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, winnersBracketTeam, losersBracketTeam, false, \"championship\"));\n        } else {\n            // Either winner's bracket team won first match, or this was the reset match\n            isChampionshipRound = true;\n        // No new matches, winner will be determined in winner detection logic\n        }\n    } else if (winnersBracketTeams.length === 1 && losersBracketTeams.length === 1 && currentRound.matches.some((m)=>(m.bracket === \"losers\" || m.id.includes(\"LosersLast\")) && m.isCompleted && m.winner && losersBracketTeams.some((t)=>t.id === m.winner.id))) {\n        // Championship match: Winner's bracket champion vs Loser's bracket champion\n        isChampionshipRound = true;\n        championshipMatches.push(createMatch(\"C\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, winnersBracketTeams[0], losersBracketTeams[0], false, \"championship\"));\n    } else if (winnersBracketTeams.length === 1 && // We have a winner's bracket champion\n    losersBracketTeams.length >= 1 && // We have at least one team in loser's bracket\n    tournament.winnersBracketFinalLoser // We have stored the winner's bracket final loser\n    ) {\n        // Find the winner of the loser's bracket\n        const losersBracketWinner = currentRound.matches.filter((m)=>m.bracket === \"losers\" && m.isCompleted && m.winner).map((m)=>m.winner).find((winner)=>losersBracketTeams.some((t)=>t.id === winner.id));\n        if (losersBracketWinner && losersBracketWinner.id !== tournament.winnersBracketFinalLoser.id) {\n            // Only schedule if they're not the same team!\n            nextRoundMatches.push(createMatch(\"LosersLast-\".concat(nextRoundNumber), nextRoundNumber, tournament.winnersBracketFinalLoser, losersBracketWinner, false, \"losers\"));\n        } else {\n            // Wait for the losers bracket to resolve properly\n            createStandardBracketMatches();\n        }\n    } else if (winnersBracketTeams.length === 2 && losersBracketTeams.length >= 1) {\n        // Create the winner's bracket final match\n        nextRoundMatches.push(createMatch(\"W\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, winnersBracketTeams[0], winnersBracketTeams[1], false, \"winners\"));\n        // Continue with losers bracket matches separately\n        createLosersBracketMatches();\n    } else {\n        createStandardBracketMatches();\n    }\n    // Helper function to create standard bracket matches\n    function createStandardBracketMatches() {\n        // --- Winners Bracket Matches ---\n        let matchCounter = 1;\n        for(let i = 0; i < winnersBracketTeams.length; i += 2){\n            const team1 = winnersBracketTeams[i];\n            var _winnersBracketTeams_;\n            const team2 = (_winnersBracketTeams_ = winnersBracketTeams[i + 1]) !== null && _winnersBracketTeams_ !== void 0 ? _winnersBracketTeams_ : null;\n            const isBye = !team2;\n            nextRoundMatches.push(createMatch(\"W\".concat(nextRoundNumber, \"-\").concat(matchCounter), nextRoundNumber, team1, team2, isBye, \"winners\"));\n            matchCounter++;\n        }\n        // Create losers bracket matches separately\n        createLosersBracketMatches();\n    }\n    // Helper function to create losers bracket matches\n    function createLosersBracketMatches() {\n        // --- Losers Bracket Matches ---\n        const eligibleLosers = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 1 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id) && // Exclude winner's bracket final loser if it exists but hasn't played yet in losers\n            !(tournament.winnersBracketFinalLoser && tournament.winnersBracketFinalLoser.id === team.id));\n        // Find teams recently dropped from winners bracket\n        const justDroppedFromWinners = currentRound.matches.filter((m)=>m.bracket === \"winners\" && m.loser && m.isCompleted).map((m)=>m.loser).filter((loser)=>eligibleLosers.some((t)=>t.id === loser.id));\n        // If this is the winner's bracket final, store the loser for later use\n        if (currentRound.matches.some((m)=>m.bracket === \"winners\" && winnersBracketTeams.length === 1 && m.loser && m.isCompleted)) {\n            // This is a special case - we found the winner's bracket final loser\n            const winnersFinalLoser = currentRound.matches.filter((m)=>m.bracket === \"winners\" && m.isCompleted && m.loser).map((m)=>m.loser).pop();\n            if (winnersFinalLoser) {\n                tournament.winnersBracketFinalLoser = winnersFinalLoser;\n            }\n        }\n        // Existing losers bracket teams\n        const existingLosers = eligibleLosers.filter((t)=>!justDroppedFromWinners.some((jd)=>jd.id === t.id));\n        // Order: most recent drop(s) first\n        const orderedLosers = [\n            ...justDroppedFromWinners,\n            ...existingLosers\n        ];\n        if (orderedLosers.length > 0) {\n            if (orderedLosers.length % 2 === 1) {\n                // Odd: bye goes to the most recent team dropped from winners bracket\n                let teamWithBye = null;\n                if (justDroppedFromWinners.length > 0) {\n                    teamWithBye = justDroppedFromWinners[justDroppedFromWinners.length - 1];\n                    // Remove the bye team from orderedLosers\n                    const byeIndex = orderedLosers.findIndex((t)=>t.id === teamWithBye.id);\n                    if (byeIndex !== -1) orderedLosers.splice(byeIndex, 1);\n                } else {\n                    // Defensive: fallback to first team if no recent drop\n                    teamWithBye = orderedLosers.shift();\n                }\n                nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, teamWithBye, null, true, \"losers\"));\n                // Pair the rest\n                for(let i = 0; i < orderedLosers.length; i += 2){\n                    const team1 = orderedLosers[i];\n                    var _orderedLosers_;\n                    const team2 = (_orderedLosers_ = orderedLosers[i + 1]) !== null && _orderedLosers_ !== void 0 ? _orderedLosers_ : null;\n                    nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-\").concat(Math.floor(i / 2) + 2), nextRoundNumber, team1, team2, !team2, \"losers\"));\n                }\n            } else {\n                // Even number: pair all\n                for(let i = 0; i < orderedLosers.length; i += 2){\n                    const team1 = orderedLosers[i];\n                    var _orderedLosers_1;\n                    const team2 = (_orderedLosers_1 = orderedLosers[i + 1]) !== null && _orderedLosers_1 !== void 0 ? _orderedLosers_1 : null;\n                    nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-\").concat(Math.floor(i / 2) + 1), nextRoundNumber, team1, team2, !team2, \"losers\"));\n                }\n            }\n        }\n    }\n    // --- Winner detection logic ---\n    let winner = tournament.winner;\n    if (isChampionshipRound) {\n        // Find the last championship match played\n        const lastChampMatch = championshipMatches[0] || prevChampionshipMatches[prevChampionshipMatches.length - 1];\n        if (lastChampMatch && lastChampMatch.isCompleted && lastChampMatch.winner && lastChampMatch.loser) {\n            const winnersBracketTeam = lastChampMatch.team1;\n            const losersBracketTeam = lastChampMatch.team2;\n            const losersBracketTeamWon = losersBracketTeam && lastChampMatch.winner.id === losersBracketTeam.id;\n            // If loser's bracket team won first championship match, winner's bracket team gets another chance\n            if (losersBracketTeamWon && tournament.championshipMatchesPlayed === 1) {\n                winner = undefined; // No winner yet, need reset match\n            } else {\n                // Either winner's bracket team won first match, or this was the reset match\n                winner = lastChampMatch.winner;\n            }\n        }\n    }\n    // --- INFINITE RECURSION GUARD ---\n    const noMoreMatches = isChampionshipRound && championshipMatches.length === 0 || !isChampionshipRound && nextRoundMatches.length === 0;\n    if (noMoreMatches) {\n        // Tournament is over, do not advance further\n        return {\n            ...tournament,\n            winner,\n            currentRound: tournament.currentRound\n        };\n    }\n    // Compose the new tournament object\n    return {\n        ...tournament,\n        rounds: [\n            ...tournament.rounds,\n            {\n                roundNumber: nextRoundNumber,\n                matches: isChampionshipRound ? championshipMatches : nextRoundMatches,\n                isDoubleElimination: true,\n                isChampionshipRound\n            }\n        ],\n        currentRound: nextRoundNumber,\n        eliminatedTeams: [\n            ...tournament.eliminatedTeams,\n            ...newlyEliminated.filter((t)=>!tournament.eliminatedTeams.some((et)=>et.id === t.id))\n        ],\n        championshipMatchesPlayed: isChampionshipRound ? tournament.championshipMatchesPlayed + 1 : tournament.championshipMatchesPlayed,\n        winnersBracketFinalLoser: tournament.winnersBracketFinalLoser,\n        winner\n    };\n}; // export const advanceToNextRound = (tournament: Tournament): Tournament => {\n //   const currentRound = tournament.rounds[tournament.rounds.length - 1];\n //   const nextRoundNumber = tournament.currentRound + 1;\n //   // Track all losses across the tournament\n //   const lossCounts: Record<string, number> = {};\n //   tournament.rounds.forEach((round) => {\n //     round.matches.forEach((match) => {\n //       if (match.isCompleted && match.loser) {\n //         lossCounts[match.loser.id] = (lossCounts[match.loser.id] || 0) + 1;\n //       }\n //     });\n //   });\n //   // Gather all teams ever in the tournament\n //   const allTeams: Team[] = [];\n //   const teamIds = new Set<string>();\n //   for (const round of tournament.rounds) {\n //     for (const match of round.matches) {\n //       if (match.team1 && !teamIds.has(match.team1.id)) {\n //         allTeams.push(match.team1);\n //         teamIds.add(match.team1.id);\n //       }\n //       if (match.team2 && !teamIds.has(match.team2.id)) {\n //         allTeams.push(match.team2);\n //         teamIds.add(match.team2.id);\n //       }\n //     }\n //   }\n //   // Identify newly eliminated teams (2 losses)\n //   const newlyEliminated: Team[] = [];\n //   for (const team of allTeams) {\n //     if (\n //       (lossCounts[team.id] || 0) >= 2 &&\n //       !tournament.eliminatedTeams.some((t) => t.id === team.id)\n //     ) {\n //       newlyEliminated.push(team);\n //     }\n //   }\n //   // Winners: teams with 0 losses and not eliminated\n //   const winnersBracketTeams = allTeams.filter(\n //     (team) =>\n //       (lossCounts[team.id] || 0) === 0 &&\n //       !tournament.eliminatedTeams.some((t) => t.id === team.id) &&\n //       !newlyEliminated.some((t) => t.id === team.id)\n //   );\n //   // Losers: teams with 1 loss and not eliminated\n //   const losersBracketTeams = allTeams.filter(\n //     (team) =>\n //       (lossCounts[team.id] || 0) === 1 &&\n //       !tournament.eliminatedTeams.some((t) => t.id === team.id) &&\n //       !newlyEliminated.some((t) => t.id === team.id)\n //   );\n //   let isChampionshipRound = false;\n //   let championshipMatches: Match[] = [];\n //   let nextRoundMatches: Match[] = [];\n //   const prevChampionshipMatches = tournament.rounds\n //     .filter((r) => r.isChampionshipRound)\n //     .flatMap((r) => r.matches)\n //     .filter((m) => m.bracket === \"championship\");\n //   // --- CHAMPIONSHIP LOGIC ---\n //   // Check if a championship match already happened and was completed\n //   if (\n //     prevChampionshipMatches.length >= 1 &&\n //     prevChampionshipMatches[prevChampionshipMatches.length - 1].isCompleted\n //   ) {\n //     const lastChampMatch =\n //       prevChampionshipMatches[prevChampionshipMatches.length - 1];\n //     const winnersBracketTeam = lastChampMatch.team1;\n //     const losersBracketTeam = lastChampMatch.team2;\n //     // If loser's bracket team won the first championship match, winner's bracket team gets another chance\n //     if (\n //       lastChampMatch.winner?.id === losersBracketTeam?.id &&\n //       tournament.championshipMatchesPlayed === 1\n //     ) {\n //       isChampionshipRound = true;\n //       // Create the \"reset\" match\n //       championshipMatches.push(\n //         createMatch(\n //           `C${nextRoundNumber}-1`,\n //           nextRoundNumber,\n //           winnersBracketTeam,\n //           losersBracketTeam,\n //           false,\n //           \"championship\"\n //         )\n //       );\n //     } else {\n //       // Either winner's bracket team won first match, or this was the reset match\n //       isChampionshipRound = true;\n //       // No new matches, winner will be determined in winner detection logic\n //     }\n //   }\n //   // Check if we're ready for the championship match - one team in each bracket and loser's final is complete\n //   else if (\n //     winnersBracketTeams.length === 1 &&\n //     losersBracketTeams.length === 1 &&\n //     currentRound.matches.some(\n //       (m) =>\n //         (m.bracket === \"losers\" || m.id.includes(\"LosersLast\")) &&\n //         m.isCompleted &&\n //         m.winner &&\n //         losersBracketTeams.some((t) => t.id === m.winner!.id)\n //     )\n //   ) {\n //     // Championship match: Winner's bracket champion vs Loser's bracket champion\n //     isChampionshipRound = true;\n //     championshipMatches.push(\n //       createMatch(\n //         `C${nextRoundNumber}-1`,\n //         nextRoundNumber,\n //         winnersBracketTeams[0], // Winner's bracket champion\n //         losersBracketTeams[0], // Loser's bracket champion\n //         false,\n //         \"championship\"\n //       )\n //     );\n //   }\n //   // Check if we have a loser from winner's bracket final waiting to play against loser's bracket winner\n //   else if (\n //     winnersBracketTeams.length === 1 && // We have a winner's bracket champion\n //     losersBracketTeams.length >= 1 && // We have at least one team in loser's bracket\n //     tournament.winnersBracketFinalLoser // We have stored the winner's bracket final loser\n //   ) {\n //     // Find the winner of the loser's bracket\n //     const losersBracketWinner = currentRound.matches\n //       .filter((m) => m.bracket === \"losers\" && m.isCompleted && m.winner)\n //       .map((m) => m.winner!)\n //       .find((winner) => losersBracketTeams.some((t) => t.id === winner.id));\n //     if (\n //       losersBracketWinner &&\n //       losersBracketWinner.id !== tournament.winnersBracketFinalLoser.id\n //     ) {\n //       // Only schedule if they're not the same team!\n //       nextRoundMatches.push(\n //         createMatch(\n //           `LosersLast-${nextRoundNumber}`,\n //           nextRoundNumber,\n //           tournament.winnersBracketFinalLoser,\n //           losersBracketWinner,\n //           false,\n //           \"losers\"\n //         )\n //       );\n //     } else {\n //       // Wait for the losers bracket to resolve properly\n //       createStandardBracketMatches();\n //     }\n //   }\n //   // Check if this is the winner's bracket final (exactly 2 teams in winner's bracket)\n //   else if (winnersBracketTeams.length === 2 && losersBracketTeams.length >= 1) {\n //     // Create the winner's bracket final match\n //     nextRoundMatches.push(\n //       createMatch(\n //         `W${nextRoundNumber}-1`,\n //         nextRoundNumber,\n //         winnersBracketTeams[0],\n //         winnersBracketTeams[1],\n //         false,\n //         \"winners\"\n //       )\n //     );\n //     // Continue with losers bracket matches separately\n //     createLosersBracketMatches();\n //   }\n //   // Otherwise, continue with normal bracket play\n //   else {\n //     createStandardBracketMatches();\n //   }\n //   // Helper function to create standard bracket matches\n //   function createStandardBracketMatches() {\n //     // --- Winners Bracket Matches ---\n //     let matchCounter = 1;\n //     for (let i = 0; i < winnersBracketTeams.length; i += 2) {\n //       const team1 = winnersBracketTeams[i];\n //       const team2 = winnersBracketTeams[i + 1] ?? null;\n //       const isBye = !team2;\n //       nextRoundMatches.push(\n //         createMatch(\n //           `W${nextRoundNumber}-${matchCounter}`,\n //           nextRoundNumber,\n //           team1,\n //           team2,\n //           isBye,\n //           \"winners\"\n //         )\n //       );\n //       matchCounter++;\n //     }\n //     // Create losers bracket matches separately\n //     createLosersBracketMatches();\n //   }\n //   // Helper function to create losers bracket matches\n //   function createLosersBracketMatches() {\n //     // --- Losers Bracket Matches ---\n //     const eligibleLosers = allTeams.filter(\n //       (team) =>\n //         (lossCounts[team.id] || 0) === 1 &&\n //         !tournament.eliminatedTeams.some((t) => t.id === team.id) &&\n //         !newlyEliminated.some((t) => t.id === team.id) &&\n //         // Exclude winner's bracket final loser if it exists but hasn't played yet in losers\n //         !(\n //           tournament.winnersBracketFinalLoser &&\n //           tournament.winnersBracketFinalLoser.id === team.id\n //         )\n //     );\n //     // Find teams recently dropped from winners bracket\n //     const justDroppedFromWinners = currentRound.matches\n //       .filter((m) => m.bracket === \"winners\" && m.loser && m.isCompleted)\n //       .map((m) => m.loser!)\n //       .filter((loser) => eligibleLosers.some((t) => t.id === loser.id));\n //     // If this is the winner's bracket final, store the loser for later use\n //     if (\n //       currentRound.matches.some(\n //         (m) =>\n //           m.bracket === \"winners\" &&\n //           winnersBracketTeams.length === 1 &&\n //           m.loser &&\n //           m.isCompleted\n //       )\n //     ) {\n //       // This is a special case - we found the winner's bracket final loser\n //       const winnersFinalLoser = currentRound.matches\n //         .filter((m) => m.bracket === \"winners\" && m.isCompleted && m.loser)\n //         .map((m) => m.loser!)\n //         .pop();\n //       if (winnersFinalLoser) {\n //         tournament.winnersBracketFinalLoser = winnersFinalLoser;\n //       }\n //     }\n //     // Existing losers bracket teams\n //     const existingLosers = eligibleLosers.filter(\n //       (t) => !justDroppedFromWinners.some((jd) => jd.id === t.id)\n //     );\n //     // Order: most recent drop(s) first\n //     const orderedLosers = [...justDroppedFromWinners, ...existingLosers];\n //     if (orderedLosers.length > 0) {\n //       if (orderedLosers.length % 2 === 1) {\n //         // Odd: bye goes to the most recent team dropped from winners bracket\n //         let teamWithBye: Team | null = null;\n //         if (justDroppedFromWinners.length > 0) {\n //           teamWithBye =\n //             justDroppedFromWinners[justDroppedFromWinners.length - 1];\n //           // Remove the bye team from orderedLosers\n //           const byeIndex = orderedLosers.findIndex(\n //             (t) => t.id === teamWithBye!.id\n //           );\n //           if (byeIndex !== -1) orderedLosers.splice(byeIndex, 1);\n //         } else {\n //           // Defensive: fallback to first team if no recent drop\n //           teamWithBye = orderedLosers.shift()!;\n //         }\n //         nextRoundMatches.push(\n //           createMatch(\n //             `L${nextRoundNumber}-1`,\n //             nextRoundNumber,\n //             teamWithBye,\n //             null,\n //             true,\n //             \"losers\"\n //           )\n //         );\n //         // Pair the rest\n //         for (let i = 0; i < orderedLosers.length; i += 2) {\n //           const team1 = orderedLosers[i];\n //           const team2 = orderedLosers[i + 1] ?? null;\n //           nextRoundMatches.push(\n //             createMatch(\n //               `L${nextRoundNumber}-${Math.floor(i / 2) + 2}`,\n //               nextRoundNumber,\n //               team1,\n //               team2,\n //               !team2,\n //               \"losers\"\n //             )\n //           );\n //         }\n //       } else {\n //         // Even number: pair all\n //         for (let i = 0; i < orderedLosers.length; i += 2) {\n //           const team1 = orderedLosers[i];\n //           const team2 = orderedLosers[i + 1] ?? null;\n //           nextRoundMatches.push(\n //             createMatch(\n //               `L${nextRoundNumber}-${Math.floor(i / 2) + 1}`,\n //               nextRoundNumber,\n //               team1,\n //               team2,\n //               !team2,\n //               \"losers\"\n //             )\n //           );\n //         }\n //       }\n //     }\n //   }\n //   // --- Winner detection logic ---\n //   let winner: Team | undefined = tournament.winner;\n //   if (isChampionshipRound) {\n //     // Find the last championship match played\n //     const lastChampMatch =\n //       championshipMatches[0] ||\n //       prevChampionshipMatches[prevChampionshipMatches.length - 1];\n //     if (\n //       lastChampMatch &&\n //       lastChampMatch.isCompleted &&\n //       lastChampMatch.winner &&\n //       lastChampMatch.loser\n //     ) {\n //       const winnersBracketTeam = lastChampMatch.team1;\n //       const losersBracketTeam = lastChampMatch.team2;\n //       const losersBracketTeamWon =\n //         lastChampMatch.winner.id === losersBracketTeam.id;\n //       // If loser's bracket team won first championship match, winner's bracket team gets another chance\n //       if (losersBracketTeamWon && tournament.championshipMatchesPlayed === 1) {\n //         winner = undefined; // No winner yet, need reset match\n //       } else {\n //         // Either winner's bracket team won first match, or this was the reset match\n //         winner = lastChampMatch.winner;\n //       }\n //     }\n //   }\n //   // --- INFINITE RECURSION GUARD ---\n //   const noMoreMatches =\n //     (isChampionshipRound && championshipMatches.length === 0) ||\n //     (!isChampionshipRound && nextRoundMatches.length === 0);\n //   if (noMoreMatches) {\n //     // Tournament is over, do not advance further\n //     return {\n //       ...tournament,\n //       winner,\n //       currentRound: tournament.currentRound\n //     };\n //   }\n //   // Compose the new tournament object\n //   return {\n //     ...tournament,\n //     rounds: [\n //       ...tournament.rounds,\n //       {\n //         roundNumber: nextRoundNumber,\n //         matches: isChampionshipRound ? championshipMatches : nextRoundMatches,\n //         isDoubleElimination: true,\n //         isChampionshipRound\n //       }\n //     ],\n //     currentRound: nextRoundNumber,\n //     eliminatedTeams: [\n //       ...tournament.eliminatedTeams,\n //       ...newlyEliminated.filter(\n //         (t) => !tournament.eliminatedTeams.some((et) => et.id === t.id)\n //       )\n //     ],\n //     championshipMatchesPlayed: isChampionshipRound\n //       ? tournament.championshipMatchesPlayed + 1\n //       : tournament.championshipMatchesPlayed,\n //     winnersBracketFinalLoser: tournament.winnersBracketFinalLoser,\n //     winner\n //   };\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types/tournament/matches.ts\n"));

/***/ })

});