"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tournament/page",{

/***/ "(app-pages-browser)/./types/tournament/matches.ts":
/*!*************************************!*\
  !*** ./types/tournament/matches.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   advanceToNextRound: function() { return /* binding */ advanceToNextRound; },\n/* harmony export */   createInitialRounds: function() { return /* binding */ createInitialRounds; },\n/* harmony export */   createMatch: function() { return /* binding */ createMatch; },\n/* harmony export */   updateMatchScore: function() { return /* binding */ updateMatchScore; }\n/* harmony export */ });\nconst createMatch = function(id, roundNumber, team1, team2) {\n    let isBye = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, bracket = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : \"winners\", nextMatchId = arguments.length > 6 ? arguments[6] : void 0, nextLoserMatchId = arguments.length > 7 ? arguments[7] : void 0;\n    var _ref;\n    return {\n        id,\n        roundNumber,\n        team1,\n        team2,\n        isCompleted: isBye,\n        isBye,\n        bracket,\n        winner: isBye ? (_ref = team1 !== null && team1 !== void 0 ? team1 : team2) !== null && _ref !== void 0 ? _ref : undefined : undefined,\n        loser: isBye ? undefined : undefined,\n        score: {\n            team1Score: 0,\n            team2Score: 0\n        },\n        nextMatchId,\n        nextLoserMatchId,\n        eliminatedLabel: undefined\n    };\n};\nconst createInitialRounds = (teams)=>{\n    const numTeams = teams.length;\n    const matches = [];\n    const numRounds = Math.ceil(Math.log2(numTeams));\n    const firstRoundMatches = Math.pow(2, numRounds - 1);\n    let matchCounter = 1;\n    for(let i = 0; i < firstRoundMatches; i++){\n        const team1 = teams[i * 2] || null;\n        const team2 = teams[i * 2 + 1] || null;\n        const isBye = !team1 || !team2;\n        const matchId = \"W1-\".concat(matchCounter);\n        const nextMatchId = \"W2-\".concat(Math.ceil(matchCounter / 2));\n        const nextLoserMatchId = \"L1-\".concat(Math.ceil(matchCounter / 2));\n        matches.push(createMatch(matchId, 1, team1, team2, isBye, \"winners\", nextMatchId, nextLoserMatchId));\n        matchCounter++;\n    }\n    return {\n        rounds: [\n            {\n                roundNumber: 1,\n                matches,\n                isDoubleElimination: true,\n                isChampionshipRound: false\n            }\n        ],\n        currentRound: 1,\n        eliminatedTeams: [],\n        championshipMatchesPlayed: 0\n    };\n};\nconst updateMatchScore = (match, newScore)=>{\n    const isCompleted = newScore.team1Score !== newScore.team2Score;\n    let winner = undefined;\n    let loser = undefined;\n    if (isCompleted) {\n        if (newScore.team1Score > newScore.team2Score) {\n            var _match_team1_wins, _match_team1_losses;\n            winner = match.team1 ? {\n                ...match.team1,\n                wins: ((_match_team1_wins = match.team1.wins) !== null && _match_team1_wins !== void 0 ? _match_team1_wins : 0) + 1,\n                losses: (_match_team1_losses = match.team1.losses) !== null && _match_team1_losses !== void 0 ? _match_team1_losses : 0\n            } : undefined;\n            var _match_team2_wins, _match_team2_losses;\n            loser = match.team2 ? {\n                ...match.team2,\n                wins: (_match_team2_wins = match.team2.wins) !== null && _match_team2_wins !== void 0 ? _match_team2_wins : 0,\n                losses: ((_match_team2_losses = match.team2.losses) !== null && _match_team2_losses !== void 0 ? _match_team2_losses : 0) + 1\n            } : undefined;\n        } else {\n            var _match_team2_wins1, _match_team2_losses1;\n            winner = match.team2 ? {\n                ...match.team2,\n                wins: ((_match_team2_wins1 = match.team2.wins) !== null && _match_team2_wins1 !== void 0 ? _match_team2_wins1 : 0) + 1,\n                losses: (_match_team2_losses1 = match.team2.losses) !== null && _match_team2_losses1 !== void 0 ? _match_team2_losses1 : 0\n            } : undefined;\n            var _match_team1_wins1, _match_team1_losses1;\n            loser = match.team1 ? {\n                ...match.team1,\n                wins: (_match_team1_wins1 = match.team1.wins) !== null && _match_team1_wins1 !== void 0 ? _match_team1_wins1 : 0,\n                losses: ((_match_team1_losses1 = match.team1.losses) !== null && _match_team1_losses1 !== void 0 ? _match_team1_losses1 : 0) + 1\n            } : undefined;\n        }\n    }\n    return {\n        ...match,\n        score: newScore,\n        isCompleted,\n        winner,\n        loser\n    };\n};\n// Helper to deduplicate teams by ID\nfunction dedupeTeams(teams) {\n    const seen = new Set();\n    return teams.filter((team)=>{\n        if (!team) return false;\n        if (seen.has(team.id)) return false;\n        seen.add(team.id);\n        return true;\n    });\n}\n// Helper: get all teams with exactly N losses\nfunction teamsWithLosses(lossCounts, n) {\n    return Object.keys(lossCounts).filter((teamId)=>lossCounts[teamId] === n);\n}\nconst advanceToNextRound = (tournament)=>{\n    const currentRound = tournament.rounds[tournament.rounds.length - 1];\n    const nextRoundNumber = tournament.currentRound + 1;\n    // Track all losses and wins across the tournament\n    const lossCounts = {};\n    const winsCounts = {};\n    tournament.rounds.forEach((round)=>{\n        round.matches.forEach((match)=>{\n            if (match.isCompleted && match.loser) {\n                lossCounts[match.loser.id] = (lossCounts[match.loser.id] || 0) + 1;\n            }\n            if (match.isCompleted && match.winner) {\n                winsCounts[match.winner.id] = (winsCounts[match.winner.id] || 0) + 1;\n            }\n        });\n    });\n    // Gather all teams ever in the tournament, attaching wins/losses\n    const allTeams = [];\n    const teamIds = new Set();\n    for (const round of tournament.rounds){\n        for (const match of round.matches){\n            if (match.team1 && !teamIds.has(match.team1.id)) {\n                allTeams.push({\n                    ...match.team1,\n                    wins: winsCounts[match.team1.id] || 0,\n                    losses: lossCounts[match.team1.id] || 0\n                });\n                teamIds.add(match.team1.id);\n            }\n            if (match.team2 && !teamIds.has(match.team2.id)) {\n                allTeams.push({\n                    ...match.team2,\n                    wins: winsCounts[match.team2.id] || 0,\n                    losses: lossCounts[match.team2.id] || 0\n                });\n                teamIds.add(match.team2.id);\n            }\n        }\n    }\n    // Identify newly eliminated teams (2 losses)\n    const newlyEliminated = [];\n    for (const team of allTeams){\n        if ((lossCounts[team.id] || 0) >= 2 && !tournament.eliminatedTeams.some((t)=>t.id === team.id)) {\n            newlyEliminated.push(team);\n        }\n    }\n    // Winners: teams with 0 losses and not eliminated\n    const winnersBracketTeams = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 0 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id)).map((team)=>({\n            ...team,\n            losses: lossCounts[team.id] || 0,\n            wins: winsCounts[team.id] || 0\n        }));\n    // Losers: teams with 1 loss and not eliminated\n    const losersBracketTeams = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 1 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id)).map((team)=>({\n            ...team,\n            losses: lossCounts[team.id] || 0,\n            wins: winsCounts[team.id] || 0\n        }));\n    let isChampionshipRound = false;\n    let championshipMatches = [];\n    let nextRoundMatches = [];\n    const prevChampionshipMatches = tournament.rounds.filter((r)=>r.isChampionshipRound).flatMap((r)=>r.matches).filter((m)=>m.bracket === \"championship\");\n    // --- CHAMPIONSHIP LOGIC ---\n    // If a championship match has been played and completed, check if reset is needed\n    if (prevChampionshipMatches.length >= 1 && prevChampionshipMatches[prevChampionshipMatches.length - 1].isCompleted) {\n        var _lastChampMatch_winner;\n        const lastChampMatch = prevChampionshipMatches[prevChampionshipMatches.length - 1];\n        const winnersBracketTeam = lastChampMatch.team1;\n        const losersBracketTeam = lastChampMatch.team2;\n        // If loser's bracket team won the first championship match, schedule a reset\n        if (((_lastChampMatch_winner = lastChampMatch.winner) === null || _lastChampMatch_winner === void 0 ? void 0 : _lastChampMatch_winner.id) === (losersBracketTeam === null || losersBracketTeam === void 0 ? void 0 : losersBracketTeam.id) && tournament.championshipMatchesPlayed === 1) {\n            isChampionshipRound = true;\n            championshipMatches.push(createMatch(\"C\".concat(nextRoundNumber, \"-2\"), nextRoundNumber, winnersBracketTeam, losersBracketTeam, false, \"championship\"));\n        } else {\n            // Championship is over, winner will be set below\n            isChampionshipRound = true;\n        }\n    } else if (winnersBracketTeams.length === 1 && losersBracketTeams.length === 1 && currentRound.matches.some((m)=>(m.bracket === \"losers\" || m.id.includes(\"LosersLast\")) && m.isCompleted && m.winner && losersBracketTeams.some((t)=>t.id === m.winner.id))) {\n        isChampionshipRound = true;\n        championshipMatches.push(createMatch(\"C\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, winnersBracketTeams[0], losersBracketTeams[0], false, \"championship\"));\n    } else if (winnersBracketTeams.length === 1 && losersBracketTeams.length >= 1 && tournament.winnersBracketFinalLoser) {\n        const losersBracketWinner = currentRound.matches.filter((m)=>m.bracket === \"losers\" && m.isCompleted && m.winner).map((m)=>m.winner).find((winner)=>losersBracketTeams.some((t)=>t.id === winner.id));\n        if (losersBracketWinner && losersBracketWinner.id !== tournament.winnersBracketFinalLoser.id) {\n            nextRoundMatches.push(createMatch(\"LosersLast-\".concat(nextRoundNumber), nextRoundNumber, tournament.winnersBracketFinalLoser, losersBracketWinner, false, \"losers\"));\n        } else {\n            createStandardBracketMatches();\n        }\n    } else if (winnersBracketTeams.length === 2 && losersBracketTeams.length >= 1) {\n        nextRoundMatches.push(createMatch(\"W\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, winnersBracketTeams[0], winnersBracketTeams[1], false, \"winners\"));\n        createLosersBracketMatches();\n    } else {\n        createStandardBracketMatches();\n    }\n    // --- Helper: Standard Winners Bracket Matches ---\n    function createStandardBracketMatches() {\n        let matchCounter = 1;\n        for(let i = 0; i < winnersBracketTeams.length; i += 2){\n            const team1 = winnersBracketTeams[i];\n            var _winnersBracketTeams_;\n            const team2 = (_winnersBracketTeams_ = winnersBracketTeams[i + 1]) !== null && _winnersBracketTeams_ !== void 0 ? _winnersBracketTeams_ : null;\n            const isBye = !team2;\n            nextRoundMatches.push(createMatch(\"W\".concat(nextRoundNumber, \"-\").concat(matchCounter), nextRoundNumber, team1, team2, isBye, \"winners\"));\n            matchCounter++;\n        }\n        createLosersBracketMatches();\n    }\n    // --- Helper: Losers Bracket Matches ---\n    function createLosersBracketMatches() {\n        const eligibleLosers = allTeams.filter((team)=>(lossCounts[team.id] || 0) === 1 && !tournament.eliminatedTeams.some((t)=>t.id === team.id) && !newlyEliminated.some((t)=>t.id === team.id) && !(tournament.winnersBracketFinalLoser && tournament.winnersBracketFinalLoser.id === team.id));\n        const justDroppedFromWinners = currentRound.matches.filter((m)=>m.bracket === \"winners\" && m.loser && m.isCompleted).map((m)=>m.loser).filter((loser)=>eligibleLosers.some((t)=>t.id === loser.id));\n        // If this is the winner's bracket final, store the loser for later use\n        if (currentRound.matches.some((m)=>m.bracket === \"winners\" && winnersBracketTeams.length === 1 && m.loser && m.isCompleted)) {\n            const winnersFinalLoser = currentRound.matches.filter((m)=>m.bracket === \"winners\" && m.isCompleted && m.loser).map((m)=>m.loser).pop();\n            if (winnersFinalLoser) {\n                tournament.winnersBracketFinalLoser = winnersFinalLoser;\n            }\n        }\n        const existingLosers = eligibleLosers.filter((t)=>!justDroppedFromWinners.some((jd)=>jd.id === t.id));\n        const orderedLosers = [\n            ...justDroppedFromWinners,\n            ...existingLosers\n        ];\n        if (orderedLosers.length > 0) {\n            if (orderedLosers.length % 2 === 1) {\n                let teamWithBye = null;\n                if (justDroppedFromWinners.length > 0) {\n                    teamWithBye = justDroppedFromWinners[justDroppedFromWinners.length - 1];\n                    const byeIndex = orderedLosers.findIndex((t)=>t.id === teamWithBye.id);\n                    if (byeIndex !== -1) orderedLosers.splice(byeIndex, 1);\n                } else {\n                    teamWithBye = orderedLosers.shift();\n                }\n                nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-1\"), nextRoundNumber, teamWithBye, null, true, \"losers\"));\n                for(let i = 0; i < orderedLosers.length; i += 2){\n                    const team1 = orderedLosers[i];\n                    var _orderedLosers_;\n                    const team2 = (_orderedLosers_ = orderedLosers[i + 1]) !== null && _orderedLosers_ !== void 0 ? _orderedLosers_ : null;\n                    nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-\").concat(Math.floor(i / 2) + 2), nextRoundNumber, team1, team2, !team2, \"losers\"));\n                }\n            } else {\n                for(let i = 0; i < orderedLosers.length; i += 2){\n                    const team1 = orderedLosers[i];\n                    var _orderedLosers_1;\n                    const team2 = (_orderedLosers_1 = orderedLosers[i + 1]) !== null && _orderedLosers_1 !== void 0 ? _orderedLosers_1 : null;\n                    nextRoundMatches.push(createMatch(\"L\".concat(nextRoundNumber, \"-\").concat(Math.floor(i / 2) + 1), nextRoundNumber, team1, team2, !team2, \"losers\"));\n                }\n            }\n        }\n    }\n    // --- Winner detection logic ---\n    let winner = tournament.winner;\n    if (isChampionshipRound) {\n        const lastChampMatch = championshipMatches[0] || prevChampionshipMatches[prevChampionshipMatches.length - 1];\n        if (lastChampMatch && lastChampMatch.isCompleted && lastChampMatch.winner && lastChampMatch.loser) {\n            const winnersBracketTeam = lastChampMatch.team1;\n            const losersBracketTeam = lastChampMatch.team2;\n            const losersBracketTeamWon = losersBracketTeam && lastChampMatch.winner.id === losersBracketTeam.id;\n            if (losersBracketTeamWon && tournament.championshipMatchesPlayed === 1) {\n                winner = undefined;\n            } else {\n                winner = lastChampMatch.winner;\n            }\n        }\n    }\n    // --- INFINITE RECURSION GUARD ---\n    const noMoreMatches = isChampionshipRound && championshipMatches.length === 0 || !isChampionshipRound && nextRoundMatches.length === 0;\n    if (noMoreMatches) {\n        return {\n            ...tournament,\n            winner,\n            currentRound: tournament.currentRound\n        };\n    }\n    // --- Compose new tournament object ---\n    return {\n        ...tournament,\n        rounds: [\n            ...tournament.rounds,\n            {\n                roundNumber: nextRoundNumber,\n                matches: isChampionshipRound ? championshipMatches : nextRoundMatches,\n                isDoubleElimination: true,\n                isChampionshipRound\n            }\n        ],\n        currentRound: nextRoundNumber,\n        eliminatedTeams: [\n            ...tournament.eliminatedTeams,\n            ...newlyEliminated.filter((t)=>!tournament.eliminatedTeams.some((et)=>et.id === t.id))\n        ],\n        championshipMatchesPlayed: isChampionshipRound ? tournament.championshipMatchesPlayed + 1 : tournament.championshipMatchesPlayed,\n        winnersBracketFinalLoser: tournament.winnersBracketFinalLoser,\n        winner\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3R5cGVzL3RvdXJuYW1lbnQvbWF0Y2hlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBbUNPLE1BQU1BLGNBQWMsU0FDekJDLElBQ0FDLGFBQ0FDLE9BQ0FDO1FBQ0FDLHlFQUFpQixPQUNqQkMsMkVBQWlELFdBQ2pEQyw0REFDQUM7UUFTZ0JMO1dBUkw7UUFDWEY7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUssYUFBYUo7UUFDYkE7UUFDQUM7UUFDQUksUUFBUUwsUUFBUUYsQ0FBQUEsT0FBQUEsa0JBQUFBLG1CQUFBQSxRQUFTQyxtQkFBVEQsa0JBQUFBLE9BQWtCUSxZQUFZQTtRQUM5Q0MsT0FBT1AsUUFBUU0sWUFBWUE7UUFDM0JFLE9BQU87WUFBRUMsWUFBWTtZQUFHQyxZQUFZO1FBQUU7UUFDdENSO1FBQ0FDO1FBQ0FRLGlCQUFpQkw7SUFDbkI7QUFBQSxFQUFHO0FBRUksTUFBTU0sc0JBQXNCLENBQUNDO0lBQ2xDLE1BQU1DLFdBQVdELE1BQU1FLE1BQU07SUFDN0IsTUFBTUMsVUFBbUIsRUFBRTtJQUMzQixNQUFNQyxZQUFZQyxLQUFLQyxJQUFJLENBQUNELEtBQUtFLElBQUksQ0FBQ047SUFFdEMsTUFBTU8sb0JBQW9CSCxLQUFLSSxHQUFHLENBQUMsR0FBR0wsWUFBWTtJQUNsRCxJQUFJTSxlQUFlO0lBRW5CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxtQkFBbUJHLElBQUs7UUFDMUMsTUFBTTFCLFFBQVFlLEtBQUssQ0FBQ1csSUFBSSxFQUFFLElBQUk7UUFDOUIsTUFBTXpCLFFBQVFjLEtBQUssQ0FBQ1csSUFBSSxJQUFJLEVBQUUsSUFBSTtRQUNsQyxNQUFNeEIsUUFBUSxDQUFDRixTQUFTLENBQUNDO1FBRXpCLE1BQU0wQixVQUFVLE1BQW1CLE9BQWJGO1FBQ3RCLE1BQU1yQixjQUFjLE1BQWtDLE9BQTVCZ0IsS0FBS0MsSUFBSSxDQUFDSSxlQUFlO1FBQ25ELE1BQU1wQixtQkFBbUIsTUFBa0MsT0FBNUJlLEtBQUtDLElBQUksQ0FBQ0ksZUFBZTtRQUV4RFAsUUFBUVUsSUFBSSxDQUNWL0IsWUFDRThCLFNBQ0EsR0FDQTNCLE9BQ0FDLE9BQ0FDLE9BQ0EsV0FDQUUsYUFDQUM7UUFHSm9CO0lBQ0Y7SUFFQSxPQUFPO1FBQ0xJLFFBQVE7WUFDTjtnQkFDRTlCLGFBQWE7Z0JBQ2JtQjtnQkFDQVkscUJBQXFCO2dCQUNyQkMscUJBQXFCO1lBQ3ZCO1NBQ0Q7UUFDREMsY0FBYztRQUNkQyxpQkFBaUIsRUFBRTtRQUNuQkMsMkJBQTJCO0lBQzdCO0FBQ0YsRUFBRTtBQUVLLE1BQU1DLG1CQUFtQixDQUM5QkMsT0FDQUM7SUFFQSxNQUFNL0IsY0FBYytCLFNBQVMxQixVQUFVLEtBQUswQixTQUFTekIsVUFBVTtJQUMvRCxJQUFJTCxTQUEyQkM7SUFDL0IsSUFBSUMsUUFBMEJEO0lBQzlCLElBQUlGLGFBQWE7UUFDZixJQUFJK0IsU0FBUzFCLFVBQVUsR0FBRzBCLFNBQVN6QixVQUFVLEVBQUU7Z0JBSWhDd0IsbUJBQ0NBO1lBSmQ3QixTQUFTNkIsTUFBTXBDLEtBQUssR0FDaEI7Z0JBQ0UsR0FBR29DLE1BQU1wQyxLQUFLO2dCQUNkc0MsTUFBTSxDQUFDRixDQUFBQSxvQkFBQUEsTUFBTXBDLEtBQUssQ0FBQ3NDLElBQUksY0FBaEJGLCtCQUFBQSxvQkFBb0IsS0FBSztnQkFDaENHLFFBQVFILENBQUFBLHNCQUFBQSxNQUFNcEMsS0FBSyxDQUFDdUMsTUFBTSxjQUFsQkgsaUNBQUFBLHNCQUFzQjtZQUNoQyxJQUNBNUI7Z0JBSVE0QixtQkFDR0E7WUFKZjNCLFFBQVEyQixNQUFNbkMsS0FBSyxHQUNmO2dCQUNFLEdBQUdtQyxNQUFNbkMsS0FBSztnQkFDZHFDLE1BQU1GLENBQUFBLG9CQUFBQSxNQUFNbkMsS0FBSyxDQUFDcUMsSUFBSSxjQUFoQkYsK0JBQUFBLG9CQUFvQjtnQkFDMUJHLFFBQVEsQ0FBQ0gsQ0FBQUEsc0JBQUFBLE1BQU1uQyxLQUFLLENBQUNzQyxNQUFNLGNBQWxCSCxpQ0FBQUEsc0JBQXNCLEtBQUs7WUFDdEMsSUFDQTVCO1FBQ04sT0FBTztnQkFJUTRCLG9CQUNDQTtZQUpkN0IsU0FBUzZCLE1BQU1uQyxLQUFLLEdBQ2hCO2dCQUNFLEdBQUdtQyxNQUFNbkMsS0FBSztnQkFDZHFDLE1BQU0sQ0FBQ0YsQ0FBQUEscUJBQUFBLE1BQU1uQyxLQUFLLENBQUNxQyxJQUFJLGNBQWhCRixnQ0FBQUEscUJBQW9CLEtBQUs7Z0JBQ2hDRyxRQUFRSCxDQUFBQSx1QkFBQUEsTUFBTW5DLEtBQUssQ0FBQ3NDLE1BQU0sY0FBbEJILGtDQUFBQSx1QkFBc0I7WUFDaEMsSUFDQTVCO2dCQUlRNEIsb0JBQ0dBO1lBSmYzQixRQUFRMkIsTUFBTXBDLEtBQUssR0FDZjtnQkFDRSxHQUFHb0MsTUFBTXBDLEtBQUs7Z0JBQ2RzQyxNQUFNRixDQUFBQSxxQkFBQUEsTUFBTXBDLEtBQUssQ0FBQ3NDLElBQUksY0FBaEJGLGdDQUFBQSxxQkFBb0I7Z0JBQzFCRyxRQUFRLENBQUNILENBQUFBLHVCQUFBQSxNQUFNcEMsS0FBSyxDQUFDdUMsTUFBTSxjQUFsQkgsa0NBQUFBLHVCQUFzQixLQUFLO1lBQ3RDLElBQ0E1QjtRQUNOO0lBQ0Y7SUFDQSxPQUFPO1FBQ0wsR0FBRzRCLEtBQUs7UUFDUjFCLE9BQU8yQjtRQUNQL0I7UUFDQUM7UUFDQUU7SUFDRjtBQUNGLEVBQUU7QUFFRixvQ0FBb0M7QUFDcEMsU0FBUytCLFlBQVl6QixLQUFhO0lBQ2hDLE1BQU0wQixPQUFPLElBQUlDO0lBQ2pCLE9BQU8zQixNQUFNNEIsTUFBTSxDQUFDLENBQUNDO1FBQ25CLElBQUksQ0FBQ0EsTUFBTSxPQUFPO1FBQ2xCLElBQUlILEtBQUtJLEdBQUcsQ0FBQ0QsS0FBSzlDLEVBQUUsR0FBRyxPQUFPO1FBQzlCMkMsS0FBS0ssR0FBRyxDQUFDRixLQUFLOUMsRUFBRTtRQUNoQixPQUFPO0lBQ1Q7QUFDRjtBQUVBLDhDQUE4QztBQUM5QyxTQUFTaUQsZ0JBQ1BDLFVBQWtDLEVBQ2xDQyxDQUFTO0lBRVQsT0FBT0MsT0FBT0MsSUFBSSxDQUFDSCxZQUFZTCxNQUFNLENBQUMsQ0FBQ1MsU0FBV0osVUFBVSxDQUFDSSxPQUFPLEtBQUtIO0FBQzNFO0FBRU8sTUFBTUkscUJBQXFCLENBQUNDO0lBQ2pDLE1BQU10QixlQUFlc0IsV0FBV3pCLE1BQU0sQ0FBQ3lCLFdBQVd6QixNQUFNLENBQUNaLE1BQU0sR0FBRyxFQUFFO0lBQ3BFLE1BQU1zQyxrQkFBa0JELFdBQVd0QixZQUFZLEdBQUc7SUFFbEQsa0RBQWtEO0lBQ2xELE1BQU1nQixhQUFxQyxDQUFDO0lBQzVDLE1BQU1RLGFBQXFDLENBQUM7SUFDNUNGLFdBQVd6QixNQUFNLENBQUM0QixPQUFPLENBQUMsQ0FBQ0M7UUFDekJBLE1BQU14QyxPQUFPLENBQUN1QyxPQUFPLENBQUMsQ0FBQ3JCO1lBQ3JCLElBQUlBLE1BQU05QixXQUFXLElBQUk4QixNQUFNM0IsS0FBSyxFQUFFO2dCQUNwQ3VDLFVBQVUsQ0FBQ1osTUFBTTNCLEtBQUssQ0FBQ1gsRUFBRSxDQUFDLEdBQUcsQ0FBQ2tELFVBQVUsQ0FBQ1osTUFBTTNCLEtBQUssQ0FBQ1gsRUFBRSxDQUFDLElBQUksS0FBSztZQUNuRTtZQUNBLElBQUlzQyxNQUFNOUIsV0FBVyxJQUFJOEIsTUFBTTdCLE1BQU0sRUFBRTtnQkFDckNpRCxVQUFVLENBQUNwQixNQUFNN0IsTUFBTSxDQUFDVCxFQUFFLENBQUMsR0FBRyxDQUFDMEQsVUFBVSxDQUFDcEIsTUFBTTdCLE1BQU0sQ0FBQ1QsRUFBRSxDQUFDLElBQUksS0FBSztZQUNyRTtRQUNGO0lBQ0Y7SUFFQSxpRUFBaUU7SUFDakUsTUFBTTZELFdBQW1CLEVBQUU7SUFDM0IsTUFBTUMsVUFBVSxJQUFJbEI7SUFDcEIsS0FBSyxNQUFNZ0IsU0FBU0osV0FBV3pCLE1BQU0sQ0FBRTtRQUNyQyxLQUFLLE1BQU1PLFNBQVNzQixNQUFNeEMsT0FBTyxDQUFFO1lBQ2pDLElBQUlrQixNQUFNcEMsS0FBSyxJQUFJLENBQUM0RCxRQUFRZixHQUFHLENBQUNULE1BQU1wQyxLQUFLLENBQUNGLEVBQUUsR0FBRztnQkFDL0M2RCxTQUFTL0IsSUFBSSxDQUFDO29CQUNaLEdBQUdRLE1BQU1wQyxLQUFLO29CQUNkc0MsTUFBTWtCLFVBQVUsQ0FBQ3BCLE1BQU1wQyxLQUFLLENBQUNGLEVBQUUsQ0FBQyxJQUFJO29CQUNwQ3lDLFFBQVFTLFVBQVUsQ0FBQ1osTUFBTXBDLEtBQUssQ0FBQ0YsRUFBRSxDQUFDLElBQUk7Z0JBQ3hDO2dCQUNBOEQsUUFBUWQsR0FBRyxDQUFDVixNQUFNcEMsS0FBSyxDQUFDRixFQUFFO1lBQzVCO1lBQ0EsSUFBSXNDLE1BQU1uQyxLQUFLLElBQUksQ0FBQzJELFFBQVFmLEdBQUcsQ0FBQ1QsTUFBTW5DLEtBQUssQ0FBQ0gsRUFBRSxHQUFHO2dCQUMvQzZELFNBQVMvQixJQUFJLENBQUM7b0JBQ1osR0FBR1EsTUFBTW5DLEtBQUs7b0JBQ2RxQyxNQUFNa0IsVUFBVSxDQUFDcEIsTUFBTW5DLEtBQUssQ0FBQ0gsRUFBRSxDQUFDLElBQUk7b0JBQ3BDeUMsUUFBUVMsVUFBVSxDQUFDWixNQUFNbkMsS0FBSyxDQUFDSCxFQUFFLENBQUMsSUFBSTtnQkFDeEM7Z0JBQ0E4RCxRQUFRZCxHQUFHLENBQUNWLE1BQU1uQyxLQUFLLENBQUNILEVBQUU7WUFDNUI7UUFDRjtJQUNGO0lBRUEsNkNBQTZDO0lBQzdDLE1BQU0rRCxrQkFBMEIsRUFBRTtJQUNsQyxLQUFLLE1BQU1qQixRQUFRZSxTQUFVO1FBQzNCLElBQ0UsQ0FBQ1gsVUFBVSxDQUFDSixLQUFLOUMsRUFBRSxDQUFDLElBQUksTUFBTSxLQUM5QixDQUFDd0QsV0FBV3JCLGVBQWUsQ0FBQzZCLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFakUsRUFBRSxLQUFLOEMsS0FBSzlDLEVBQUUsR0FDeEQ7WUFDQStELGdCQUFnQmpDLElBQUksQ0FBQ2dCO1FBQ3ZCO0lBQ0Y7SUFFQSxrREFBa0Q7SUFDbEQsTUFBTW9CLHNCQUFzQkwsU0FDekJoQixNQUFNLENBQ0wsQ0FBQ0MsT0FDQyxDQUFDSSxVQUFVLENBQUNKLEtBQUs5QyxFQUFFLENBQUMsSUFBSSxPQUFPLEtBQy9CLENBQUN3RCxXQUFXckIsZUFBZSxDQUFDNkIsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVqRSxFQUFFLEtBQUs4QyxLQUFLOUMsRUFBRSxLQUN4RCxDQUFDK0QsZ0JBQWdCQyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRWpFLEVBQUUsS0FBSzhDLEtBQUs5QyxFQUFFLEdBRWhEbUUsR0FBRyxDQUFDLENBQUNyQixPQUFVO1lBQ2QsR0FBR0EsSUFBSTtZQUNQTCxRQUFRUyxVQUFVLENBQUNKLEtBQUs5QyxFQUFFLENBQUMsSUFBSTtZQUMvQndDLE1BQU1rQixVQUFVLENBQUNaLEtBQUs5QyxFQUFFLENBQUMsSUFBSTtRQUMvQjtJQUVGLCtDQUErQztJQUMvQyxNQUFNb0UscUJBQXFCUCxTQUN4QmhCLE1BQU0sQ0FDTCxDQUFDQyxPQUNDLENBQUNJLFVBQVUsQ0FBQ0osS0FBSzlDLEVBQUUsQ0FBQyxJQUFJLE9BQU8sS0FDL0IsQ0FBQ3dELFdBQVdyQixlQUFlLENBQUM2QixJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRWpFLEVBQUUsS0FBSzhDLEtBQUs5QyxFQUFFLEtBQ3hELENBQUMrRCxnQkFBZ0JDLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFakUsRUFBRSxLQUFLOEMsS0FBSzlDLEVBQUUsR0FFaERtRSxHQUFHLENBQUMsQ0FBQ3JCLE9BQVU7WUFDZCxHQUFHQSxJQUFJO1lBQ1BMLFFBQVFTLFVBQVUsQ0FBQ0osS0FBSzlDLEVBQUUsQ0FBQyxJQUFJO1lBQy9Cd0MsTUFBTWtCLFVBQVUsQ0FBQ1osS0FBSzlDLEVBQUUsQ0FBQyxJQUFJO1FBQy9CO0lBRUYsSUFBSWlDLHNCQUFzQjtJQUMxQixJQUFJb0Msc0JBQStCLEVBQUU7SUFDckMsSUFBSUMsbUJBQTRCLEVBQUU7SUFFbEMsTUFBTUMsMEJBQTBCZixXQUFXekIsTUFBTSxDQUM5Q2MsTUFBTSxDQUFDLENBQUMyQixJQUFNQSxFQUFFdkMsbUJBQW1CLEVBQ25Dd0MsT0FBTyxDQUFDLENBQUNELElBQU1BLEVBQUVwRCxPQUFPLEVBQ3hCeUIsTUFBTSxDQUFDLENBQUM2QixJQUFNQSxFQUFFckUsT0FBTyxLQUFLO0lBRS9CLDZCQUE2QjtJQUM3QixrRkFBa0Y7SUFDbEYsSUFDRWtFLHdCQUF3QnBELE1BQU0sSUFBSSxLQUNsQ29ELHVCQUF1QixDQUFDQSx3QkFBd0JwRCxNQUFNLEdBQUcsRUFBRSxDQUFDWCxXQUFXLEVBQ3ZFO1lBUUVtRTtRQVBGLE1BQU1BLGlCQUNKSix1QkFBdUIsQ0FBQ0Esd0JBQXdCcEQsTUFBTSxHQUFHLEVBQUU7UUFDN0QsTUFBTXlELHFCQUFxQkQsZUFBZXpFLEtBQUs7UUFDL0MsTUFBTTJFLG9CQUFvQkYsZUFBZXhFLEtBQUs7UUFFOUMsNkVBQTZFO1FBQzdFLElBQ0V3RSxFQUFBQSx5QkFBQUEsZUFBZWxFLE1BQU0sY0FBckJrRSw2Q0FBQUEsdUJBQXVCM0UsRUFBRSxPQUFLNkUsOEJBQUFBLHdDQUFBQSxrQkFBbUI3RSxFQUFFLEtBQ25Ed0QsV0FBV3BCLHlCQUF5QixLQUFLLEdBQ3pDO1lBQ0FILHNCQUFzQjtZQUN0Qm9DLG9CQUFvQnZDLElBQUksQ0FDdEIvQixZQUNFLElBQW9CLE9BQWhCMEQsaUJBQWdCLE9BQ3BCQSxpQkFDQW1CLG9CQUNBQyxtQkFDQSxPQUNBO1FBR04sT0FBTztZQUNMLGlEQUFpRDtZQUNqRDVDLHNCQUFzQjtRQUN4QjtJQUNGLE9BRUssSUFDSGlDLG9CQUFvQi9DLE1BQU0sS0FBSyxLQUMvQmlELG1CQUFtQmpELE1BQU0sS0FBSyxLQUM5QmUsYUFBYWQsT0FBTyxDQUFDNEMsSUFBSSxDQUN2QixDQUFDVSxJQUNDLENBQUNBLEVBQUVyRSxPQUFPLEtBQUssWUFBWXFFLEVBQUUxRSxFQUFFLENBQUM4RSxRQUFRLENBQUMsYUFBWSxLQUNyREosRUFBRWxFLFdBQVcsSUFDYmtFLEVBQUVqRSxNQUFNLElBQ1IyRCxtQkFBbUJKLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFakUsRUFBRSxLQUFLMEUsRUFBRWpFLE1BQU0sQ0FBRVQsRUFBRSxJQUV4RDtRQUNBaUMsc0JBQXNCO1FBQ3RCb0Msb0JBQW9CdkMsSUFBSSxDQUN0Qi9CLFlBQ0UsSUFBb0IsT0FBaEIwRCxpQkFBZ0IsT0FDcEJBLGlCQUNBUyxtQkFBbUIsQ0FBQyxFQUFFLEVBQ3RCRSxrQkFBa0IsQ0FBQyxFQUFFLEVBQ3JCLE9BQ0E7SUFHTixPQUVLLElBQ0hGLG9CQUFvQi9DLE1BQU0sS0FBSyxLQUMvQmlELG1CQUFtQmpELE1BQU0sSUFBSSxLQUM3QnFDLFdBQVd1Qix3QkFBd0IsRUFDbkM7UUFDQSxNQUFNQyxzQkFBc0I5QyxhQUFhZCxPQUFPLENBQzdDeUIsTUFBTSxDQUFDLENBQUM2QixJQUFNQSxFQUFFckUsT0FBTyxLQUFLLFlBQVlxRSxFQUFFbEUsV0FBVyxJQUFJa0UsRUFBRWpFLE1BQU0sRUFDakUwRCxHQUFHLENBQUMsQ0FBQ08sSUFBTUEsRUFBRWpFLE1BQU0sRUFDbkJ3RSxJQUFJLENBQUMsQ0FBQ3hFLFNBQVcyRCxtQkFBbUJKLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFakUsRUFBRSxLQUFLUyxPQUFPVCxFQUFFO1FBRXJFLElBQ0VnRix1QkFDQUEsb0JBQW9CaEYsRUFBRSxLQUFLd0QsV0FBV3VCLHdCQUF3QixDQUFDL0UsRUFBRSxFQUNqRTtZQUNBc0UsaUJBQWlCeEMsSUFBSSxDQUNuQi9CLFlBQ0UsY0FBOEIsT0FBaEIwRCxrQkFDZEEsaUJBQ0FELFdBQVd1Qix3QkFBd0IsRUFDbkNDLHFCQUNBLE9BQ0E7UUFHTixPQUFPO1lBQ0xFO1FBQ0Y7SUFDRixPQUVLLElBQUloQixvQkFBb0IvQyxNQUFNLEtBQUssS0FBS2lELG1CQUFtQmpELE1BQU0sSUFBSSxHQUFHO1FBQzNFbUQsaUJBQWlCeEMsSUFBSSxDQUNuQi9CLFlBQ0UsSUFBb0IsT0FBaEIwRCxpQkFBZ0IsT0FDcEJBLGlCQUNBUyxtQkFBbUIsQ0FBQyxFQUFFLEVBQ3RCQSxtQkFBbUIsQ0FBQyxFQUFFLEVBQ3RCLE9BQ0E7UUFHSmlCO0lBQ0YsT0FFSztRQUNIRDtJQUNGO0lBRUEsbURBQW1EO0lBQ25ELFNBQVNBO1FBQ1AsSUFBSXZELGVBQWU7UUFDbkIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlzQyxvQkFBb0IvQyxNQUFNLEVBQUVTLEtBQUssRUFBRztZQUN0RCxNQUFNMUIsUUFBUWdFLG1CQUFtQixDQUFDdEMsRUFBRTtnQkFDdEJzQztZQUFkLE1BQU0vRCxRQUFRK0QsQ0FBQUEsd0JBQUFBLG1CQUFtQixDQUFDdEMsSUFBSSxFQUFFLGNBQTFCc0MsbUNBQUFBLHdCQUE4QjtZQUM1QyxNQUFNOUQsUUFBUSxDQUFDRDtZQUNmbUUsaUJBQWlCeEMsSUFBSSxDQUNuQi9CLFlBQ0UsSUFBdUI0QixPQUFuQjhCLGlCQUFnQixLQUFnQixPQUFiOUIsZUFDdkI4QixpQkFDQXZELE9BQ0FDLE9BQ0FDLE9BQ0E7WUFHSnVCO1FBQ0Y7UUFDQXdEO0lBQ0Y7SUFFQSx5Q0FBeUM7SUFDekMsU0FBU0E7UUFDUCxNQUFNQyxpQkFBaUJ2QixTQUFTaEIsTUFBTSxDQUNwQyxDQUFDQyxPQUNDLENBQUNJLFVBQVUsQ0FBQ0osS0FBSzlDLEVBQUUsQ0FBQyxJQUFJLE9BQU8sS0FDL0IsQ0FBQ3dELFdBQVdyQixlQUFlLENBQUM2QixJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRWpFLEVBQUUsS0FBSzhDLEtBQUs5QyxFQUFFLEtBQ3hELENBQUMrRCxnQkFBZ0JDLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFakUsRUFBRSxLQUFLOEMsS0FBSzlDLEVBQUUsS0FDN0MsQ0FBRXdELENBQUFBLFdBQVd1Qix3QkFBd0IsSUFBSXZCLFdBQVd1Qix3QkFBd0IsQ0FBQy9FLEVBQUUsS0FBSzhDLEtBQUs5QyxFQUFFO1FBRS9GLE1BQU1xRix5QkFBeUJuRCxhQUFhZCxPQUFPLENBQ2hEeUIsTUFBTSxDQUFDLENBQUM2QixJQUFNQSxFQUFFckUsT0FBTyxLQUFLLGFBQWFxRSxFQUFFL0QsS0FBSyxJQUFJK0QsRUFBRWxFLFdBQVcsRUFDakUyRCxHQUFHLENBQUMsQ0FBQ08sSUFBTUEsRUFBRS9ELEtBQUssRUFDbEJrQyxNQUFNLENBQUMsQ0FBQ2xDLFFBQVV5RSxlQUFlcEIsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVqRSxFQUFFLEtBQUtXLE1BQU1YLEVBQUU7UUFDakUsdUVBQXVFO1FBQ3ZFLElBQ0VrQyxhQUFhZCxPQUFPLENBQUM0QyxJQUFJLENBQ3ZCLENBQUNVLElBQ0NBLEVBQUVyRSxPQUFPLEtBQUssYUFDZDZELG9CQUFvQi9DLE1BQU0sS0FBSyxLQUMvQnVELEVBQUUvRCxLQUFLLElBQ1ArRCxFQUFFbEUsV0FBVyxHQUVqQjtZQUNBLE1BQU04RSxvQkFBb0JwRCxhQUFhZCxPQUFPLENBQzNDeUIsTUFBTSxDQUFDLENBQUM2QixJQUFNQSxFQUFFckUsT0FBTyxLQUFLLGFBQWFxRSxFQUFFbEUsV0FBVyxJQUFJa0UsRUFBRS9ELEtBQUssRUFDakV3RCxHQUFHLENBQUMsQ0FBQ08sSUFBTUEsRUFBRS9ELEtBQUssRUFDbEI0RSxHQUFHO1lBQ04sSUFBSUQsbUJBQW1CO2dCQUNyQjlCLFdBQVd1Qix3QkFBd0IsR0FBR087WUFDeEM7UUFDRjtRQUNBLE1BQU1FLGlCQUFpQkosZUFBZXZDLE1BQU0sQ0FDMUMsQ0FBQ29CLElBQU0sQ0FBQ29CLHVCQUF1QnJCLElBQUksQ0FBQyxDQUFDeUIsS0FBT0EsR0FBR3pGLEVBQUUsS0FBS2lFLEVBQUVqRSxFQUFFO1FBRTVELE1BQU0wRixnQkFBZ0I7ZUFBSUw7ZUFBMkJHO1NBQWU7UUFDcEUsSUFBSUUsY0FBY3ZFLE1BQU0sR0FBRyxHQUFHO1lBQzVCLElBQUl1RSxjQUFjdkUsTUFBTSxHQUFHLE1BQU0sR0FBRztnQkFDbEMsSUFBSXdFLGNBQTJCO2dCQUMvQixJQUFJTix1QkFBdUJsRSxNQUFNLEdBQUcsR0FBRztvQkFDckN3RSxjQUFjTixzQkFBc0IsQ0FBQ0EsdUJBQXVCbEUsTUFBTSxHQUFHLEVBQUU7b0JBQ3ZFLE1BQU15RSxXQUFXRixjQUFjRyxTQUFTLENBQUMsQ0FBQzVCLElBQU1BLEVBQUVqRSxFQUFFLEtBQUsyRixZQUFhM0YsRUFBRTtvQkFDeEUsSUFBSTRGLGFBQWEsQ0FBQyxHQUFHRixjQUFjSSxNQUFNLENBQUNGLFVBQVU7Z0JBQ3RELE9BQU87b0JBQ0xELGNBQWNELGNBQWNLLEtBQUs7Z0JBQ25DO2dCQUNBekIsaUJBQWlCeEMsSUFBSSxDQUNuQi9CLFlBQ0UsSUFBb0IsT0FBaEIwRCxpQkFBZ0IsT0FDcEJBLGlCQUNBa0MsYUFDQSxNQUNBLE1BQ0E7Z0JBR0osSUFBSyxJQUFJL0QsSUFBSSxHQUFHQSxJQUFJOEQsY0FBY3ZFLE1BQU0sRUFBRVMsS0FBSyxFQUFHO29CQUNoRCxNQUFNMUIsUUFBUXdGLGFBQWEsQ0FBQzlELEVBQUU7d0JBQ2hCOEQ7b0JBQWQsTUFBTXZGLFFBQVF1RixDQUFBQSxrQkFBQUEsYUFBYSxDQUFDOUQsSUFBSSxFQUFFLGNBQXBCOEQsNkJBQUFBLGtCQUF3QjtvQkFDdENwQixpQkFBaUJ4QyxJQUFJLENBQ25CL0IsWUFDRSxJQUF1QnVCLE9BQW5CbUMsaUJBQWdCLEtBQXlCLE9BQXRCbkMsS0FBSzBFLEtBQUssQ0FBQ3BFLElBQUksS0FBSyxJQUMzQzZCLGlCQUNBdkQsT0FDQUMsT0FDQSxDQUFDQSxPQUNEO2dCQUdOO1lBQ0YsT0FBTztnQkFDTCxJQUFLLElBQUl5QixJQUFJLEdBQUdBLElBQUk4RCxjQUFjdkUsTUFBTSxFQUFFUyxLQUFLLEVBQUc7b0JBQ2hELE1BQU0xQixRQUFRd0YsYUFBYSxDQUFDOUQsRUFBRTt3QkFDaEI4RDtvQkFBZCxNQUFNdkYsUUFBUXVGLENBQUFBLG1CQUFBQSxhQUFhLENBQUM5RCxJQUFJLEVBQUUsY0FBcEI4RCw4QkFBQUEsbUJBQXdCO29CQUN0Q3BCLGlCQUFpQnhDLElBQUksQ0FDbkIvQixZQUNFLElBQXVCdUIsT0FBbkJtQyxpQkFBZ0IsS0FBeUIsT0FBdEJuQyxLQUFLMEUsS0FBSyxDQUFDcEUsSUFBSSxLQUFLLElBQzNDNkIsaUJBQ0F2RCxPQUNBQyxPQUNBLENBQUNBLE9BQ0Q7Z0JBR047WUFDRjtRQUNGO0lBQ0Y7SUFFQSxpQ0FBaUM7SUFDakMsSUFBSU0sU0FBMkIrQyxXQUFXL0MsTUFBTTtJQUNoRCxJQUFJd0IscUJBQXFCO1FBQ3ZCLE1BQU0wQyxpQkFDSk4sbUJBQW1CLENBQUMsRUFBRSxJQUN0QkUsdUJBQXVCLENBQUNBLHdCQUF3QnBELE1BQU0sR0FBRyxFQUFFO1FBQzdELElBQ0V3RCxrQkFDQUEsZUFBZW5FLFdBQVcsSUFDMUJtRSxlQUFlbEUsTUFBTSxJQUNyQmtFLGVBQWVoRSxLQUFLLEVBQ3BCO1lBQ0EsTUFBTWlFLHFCQUFxQkQsZUFBZXpFLEtBQUs7WUFDL0MsTUFBTTJFLG9CQUFvQkYsZUFBZXhFLEtBQUs7WUFDOUMsTUFBTThGLHVCQUNKcEIscUJBQXFCRixlQUFlbEUsTUFBTSxDQUFDVCxFQUFFLEtBQUs2RSxrQkFBa0I3RSxFQUFFO1lBQ3hFLElBQUlpRyx3QkFBd0J6QyxXQUFXcEIseUJBQXlCLEtBQUssR0FBRztnQkFDdEUzQixTQUFTQztZQUNYLE9BQU87Z0JBQ0xELFNBQVNrRSxlQUFlbEUsTUFBTTtZQUNoQztRQUNGO0lBQ0Y7SUFFQSxtQ0FBbUM7SUFDbkMsTUFBTXlGLGdCQUNKLHVCQUF3QjdCLG9CQUFvQmxELE1BQU0sS0FBSyxLQUN0RCxDQUFDYyx1QkFBdUJxQyxpQkFBaUJuRCxNQUFNLEtBQUs7SUFDdkQsSUFBSStFLGVBQWU7UUFDakIsT0FBTztZQUNMLEdBQUcxQyxVQUFVO1lBQ2IvQztZQUNBeUIsY0FBY3NCLFdBQVd0QixZQUFZO1FBQ3ZDO0lBQ0Y7SUFFQSx3Q0FBd0M7SUFDeEMsT0FBTztRQUNMLEdBQUdzQixVQUFVO1FBQ2J6QixRQUFRO2VBQ0h5QixXQUFXekIsTUFBTTtZQUNwQjtnQkFDRTlCLGFBQWF3RDtnQkFDYnJDLFNBQVNhLHNCQUFzQm9DLHNCQUFzQkM7Z0JBQ3JEdEMscUJBQXFCO2dCQUNyQkM7WUFDRjtTQUNEO1FBQ0RDLGNBQWN1QjtRQUNkdEIsaUJBQWlCO2VBQ1pxQixXQUFXckIsZUFBZTtlQUMxQjRCLGdCQUFnQmxCLE1BQU0sQ0FDdkIsQ0FBQ29CLElBQU0sQ0FBQ1QsV0FBV3JCLGVBQWUsQ0FBQzZCLElBQUksQ0FBQyxDQUFDbUMsS0FBT0EsR0FBR25HLEVBQUUsS0FBS2lFLEVBQUVqRSxFQUFFO1NBRWpFO1FBQ0RvQywyQkFBMkJILHNCQUN2QnVCLFdBQVdwQix5QkFBeUIsR0FBRyxJQUN2Q29CLFdBQVdwQix5QkFBeUI7UUFDeEMyQywwQkFBMEJ2QixXQUFXdUIsd0JBQXdCO1FBQzdEdEU7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdHlwZXMvdG91cm5hbWVudC9tYXRjaGVzLnRzP2RhMjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBUZWFtIH0gZnJvbSBcIi4vbWxiLXRlYW1zXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0Y2gge1xuICBpZDogc3RyaW5nO1xuICByb3VuZE51bWJlcjogbnVtYmVyO1xuICB0ZWFtMTogVGVhbSB8IG51bGw7XG4gIHRlYW0yOiBUZWFtIHwgbnVsbDtcbiAgaXNDb21wbGV0ZWQ6IGJvb2xlYW47XG4gIGlzQnllPzogYm9vbGVhbjtcbiAgd2lubmVyPzogVGVhbTtcbiAgbG9zZXI/OiBUZWFtO1xuICBicmFja2V0OiBcIndpbm5lcnNcIiB8IFwibG9zZXJzXCIgfCBcImNoYW1waW9uc2hpcFwiO1xuICBzY29yZTogeyB0ZWFtMVNjb3JlOiBudW1iZXI7IHRlYW0yU2NvcmU6IG51bWJlciB9O1xuICBuZXh0TWF0Y2hJZD86IHN0cmluZztcbiAgbmV4dExvc2VyTWF0Y2hJZD86IHN0cmluZztcbiAgZWxpbWluYXRlZExhYmVsPzogc3RyaW5nOyAvLyBsYWJlbCBmb3IgZWxpbWluYXRlZCB0ZWFtcyBpbiBsb3NlcnMgYnJhY2tldFxuICByZXF1aXJlc1JlbWF0Y2g/OiBib29sZWFuOyAvLyBpbmRpY2F0ZXMgaWYgYSBjaGFtcGlvbnNoaXAgcmVtYXRjaCBpcyByZXF1aXJlZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdW5kIHtcbiAgcm91bmROdW1iZXI6IG51bWJlcjtcbiAgbWF0Y2hlczogTWF0Y2hbXTtcbiAgaXNEb3VibGVFbGltaW5hdGlvbjogYm9vbGVhbjtcbiAgaXNDaGFtcGlvbnNoaXBSb3VuZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3VybmFtZW50IHtcbiAgcm91bmRzOiBSb3VuZFtdO1xuICBjdXJyZW50Um91bmQ6IG51bWJlcjtcbiAgZWxpbWluYXRlZFRlYW1zOiBUZWFtW107XG4gIGNoYW1waW9uc2hpcE1hdGNoZXNQbGF5ZWQ6IG51bWJlcjtcbiAgd2lubmVyPzogVGVhbTtcbiAgd2lubmVyc0JyYWNrZXRGaW5hbExvc2VyPzogVGVhbTsgLy8gdHJhY2tzIHRoZSB3aW5uZXIncyBicmFja2V0IGZpbmFsIGxvc2VyIGZvciBjaGFtcGlvbnNoaXAgcmVtYXRjaCBsb2dpY1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTWF0Y2ggPSAoXG4gIGlkOiBzdHJpbmcsXG4gIHJvdW5kTnVtYmVyOiBudW1iZXIsXG4gIHRlYW0xOiBUZWFtIHwgbnVsbCxcbiAgdGVhbTI6IFRlYW0gfCBudWxsLFxuICBpc0J5ZTogYm9vbGVhbiA9IGZhbHNlLFxuICBicmFja2V0OiBcIndpbm5lcnNcIiB8IFwibG9zZXJzXCIgfCBcImNoYW1waW9uc2hpcFwiID0gXCJ3aW5uZXJzXCIsXG4gIG5leHRNYXRjaElkPzogc3RyaW5nLFxuICBuZXh0TG9zZXJNYXRjaElkPzogc3RyaW5nXG4pOiBNYXRjaCA9PiAoe1xuICBpZCxcbiAgcm91bmROdW1iZXIsXG4gIHRlYW0xLFxuICB0ZWFtMixcbiAgaXNDb21wbGV0ZWQ6IGlzQnllLFxuICBpc0J5ZSxcbiAgYnJhY2tldCxcbiAgd2lubmVyOiBpc0J5ZSA/IHRlYW0xID8/IHRlYW0yID8/IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCxcbiAgbG9zZXI6IGlzQnllID8gdW5kZWZpbmVkIDogdW5kZWZpbmVkLFxuICBzY29yZTogeyB0ZWFtMVNjb3JlOiAwLCB0ZWFtMlNjb3JlOiAwIH0sXG4gIG5leHRNYXRjaElkLFxuICBuZXh0TG9zZXJNYXRjaElkLFxuICBlbGltaW5hdGVkTGFiZWw6IHVuZGVmaW5lZFxufSk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVJbml0aWFsUm91bmRzID0gKHRlYW1zOiBUZWFtW10pOiBUb3VybmFtZW50ID0+IHtcbiAgY29uc3QgbnVtVGVhbXMgPSB0ZWFtcy5sZW5ndGg7XG4gIGNvbnN0IG1hdGNoZXM6IE1hdGNoW10gPSBbXTtcbiAgY29uc3QgbnVtUm91bmRzID0gTWF0aC5jZWlsKE1hdGgubG9nMihudW1UZWFtcykpO1xuXG4gIGNvbnN0IGZpcnN0Um91bmRNYXRjaGVzID0gTWF0aC5wb3coMiwgbnVtUm91bmRzIC0gMSk7XG4gIGxldCBtYXRjaENvdW50ZXIgPSAxO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3RSb3VuZE1hdGNoZXM7IGkrKykge1xuICAgIGNvbnN0IHRlYW0xID0gdGVhbXNbaSAqIDJdIHx8IG51bGw7XG4gICAgY29uc3QgdGVhbTIgPSB0ZWFtc1tpICogMiArIDFdIHx8IG51bGw7XG4gICAgY29uc3QgaXNCeWUgPSAhdGVhbTEgfHwgIXRlYW0yO1xuXG4gICAgY29uc3QgbWF0Y2hJZCA9IGBXMS0ke21hdGNoQ291bnRlcn1gO1xuICAgIGNvbnN0IG5leHRNYXRjaElkID0gYFcyLSR7TWF0aC5jZWlsKG1hdGNoQ291bnRlciAvIDIpfWA7XG4gICAgY29uc3QgbmV4dExvc2VyTWF0Y2hJZCA9IGBMMS0ke01hdGguY2VpbChtYXRjaENvdW50ZXIgLyAyKX1gO1xuXG4gICAgbWF0Y2hlcy5wdXNoKFxuICAgICAgY3JlYXRlTWF0Y2goXG4gICAgICAgIG1hdGNoSWQsXG4gICAgICAgIDEsXG4gICAgICAgIHRlYW0xLFxuICAgICAgICB0ZWFtMixcbiAgICAgICAgaXNCeWUsXG4gICAgICAgIFwid2lubmVyc1wiLFxuICAgICAgICBuZXh0TWF0Y2hJZCxcbiAgICAgICAgbmV4dExvc2VyTWF0Y2hJZFxuICAgICAgKVxuICAgICk7XG4gICAgbWF0Y2hDb3VudGVyKys7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJvdW5kczogW1xuICAgICAge1xuICAgICAgICByb3VuZE51bWJlcjogMSxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgaXNEb3VibGVFbGltaW5hdGlvbjogdHJ1ZSxcbiAgICAgICAgaXNDaGFtcGlvbnNoaXBSb3VuZDogZmFsc2VcbiAgICAgIH1cbiAgICBdLFxuICAgIGN1cnJlbnRSb3VuZDogMSxcbiAgICBlbGltaW5hdGVkVGVhbXM6IFtdLFxuICAgIGNoYW1waW9uc2hpcE1hdGNoZXNQbGF5ZWQ6IDBcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVNYXRjaFNjb3JlID0gKFxuICBtYXRjaDogTWF0Y2gsXG4gIG5ld1Njb3JlOiB7IHRlYW0xU2NvcmU6IG51bWJlcjsgdGVhbTJTY29yZTogbnVtYmVyIH1cbik6IE1hdGNoID0+IHtcbiAgY29uc3QgaXNDb21wbGV0ZWQgPSBuZXdTY29yZS50ZWFtMVNjb3JlICE9PSBuZXdTY29yZS50ZWFtMlNjb3JlO1xuICBsZXQgd2lubmVyOiBUZWFtIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICBsZXQgbG9zZXI6IFRlYW0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGlmIChpc0NvbXBsZXRlZCkge1xuICAgIGlmIChuZXdTY29yZS50ZWFtMVNjb3JlID4gbmV3U2NvcmUudGVhbTJTY29yZSkge1xuICAgICAgd2lubmVyID0gbWF0Y2gudGVhbTFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5tYXRjaC50ZWFtMSxcbiAgICAgICAgICAgIHdpbnM6IChtYXRjaC50ZWFtMS53aW5zID8/IDApICsgMSxcbiAgICAgICAgICAgIGxvc3NlczogbWF0Y2gudGVhbTEubG9zc2VzID8/IDBcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgbG9zZXIgPSBtYXRjaC50ZWFtMlxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLm1hdGNoLnRlYW0yLFxuICAgICAgICAgICAgd2luczogbWF0Y2gudGVhbTIud2lucyA/PyAwLFxuICAgICAgICAgICAgbG9zc2VzOiAobWF0Y2gudGVhbTIubG9zc2VzID8/IDApICsgMVxuICAgICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbm5lciA9IG1hdGNoLnRlYW0yXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubWF0Y2gudGVhbTIsXG4gICAgICAgICAgICB3aW5zOiAobWF0Y2gudGVhbTIud2lucyA/PyAwKSArIDEsXG4gICAgICAgICAgICBsb3NzZXM6IG1hdGNoLnRlYW0yLmxvc3NlcyA/PyAwXG4gICAgICAgICAgfVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGxvc2VyID0gbWF0Y2gudGVhbTFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5tYXRjaC50ZWFtMSxcbiAgICAgICAgICAgIHdpbnM6IG1hdGNoLnRlYW0xLndpbnMgPz8gMCxcbiAgICAgICAgICAgIGxvc3NlczogKG1hdGNoLnRlYW0xLmxvc3NlcyA/PyAwKSArIDFcbiAgICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLm1hdGNoLFxuICAgIHNjb3JlOiBuZXdTY29yZSxcbiAgICBpc0NvbXBsZXRlZCxcbiAgICB3aW5uZXIsXG4gICAgbG9zZXJcbiAgfTtcbn07XG5cbi8vIEhlbHBlciB0byBkZWR1cGxpY2F0ZSB0ZWFtcyBieSBJRFxuZnVuY3Rpb24gZGVkdXBlVGVhbXModGVhbXM6IFRlYW1bXSk6IFRlYW1bXSB7XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgcmV0dXJuIHRlYW1zLmZpbHRlcigodGVhbSkgPT4ge1xuICAgIGlmICghdGVhbSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzZWVuLmhhcyh0ZWFtLmlkKSkgcmV0dXJuIGZhbHNlO1xuICAgIHNlZW4uYWRkKHRlYW0uaWQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn1cblxuLy8gSGVscGVyOiBnZXQgYWxsIHRlYW1zIHdpdGggZXhhY3RseSBOIGxvc3Nlc1xuZnVuY3Rpb24gdGVhbXNXaXRoTG9zc2VzKFxuICBsb3NzQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LFxuICBuOiBudW1iZXJcbik6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGxvc3NDb3VudHMpLmZpbHRlcigodGVhbUlkKSA9PiBsb3NzQ291bnRzW3RlYW1JZF0gPT09IG4pO1xufVxuXG5leHBvcnQgY29uc3QgYWR2YW5jZVRvTmV4dFJvdW5kID0gKHRvdXJuYW1lbnQ6IFRvdXJuYW1lbnQpOiBUb3VybmFtZW50ID0+IHtcbiAgY29uc3QgY3VycmVudFJvdW5kID0gdG91cm5hbWVudC5yb3VuZHNbdG91cm5hbWVudC5yb3VuZHMubGVuZ3RoIC0gMV07XG4gIGNvbnN0IG5leHRSb3VuZE51bWJlciA9IHRvdXJuYW1lbnQuY3VycmVudFJvdW5kICsgMTtcblxuICAvLyBUcmFjayBhbGwgbG9zc2VzIGFuZCB3aW5zIGFjcm9zcyB0aGUgdG91cm5hbWVudFxuICBjb25zdCBsb3NzQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gIGNvbnN0IHdpbnNDb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcbiAgdG91cm5hbWVudC5yb3VuZHMuZm9yRWFjaCgocm91bmQpID0+IHtcbiAgICByb3VuZC5tYXRjaGVzLmZvckVhY2goKG1hdGNoKSA9PiB7XG4gICAgICBpZiAobWF0Y2guaXNDb21wbGV0ZWQgJiYgbWF0Y2gubG9zZXIpIHtcbiAgICAgICAgbG9zc0NvdW50c1ttYXRjaC5sb3Nlci5pZF0gPSAobG9zc0NvdW50c1ttYXRjaC5sb3Nlci5pZF0gfHwgMCkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoLmlzQ29tcGxldGVkICYmIG1hdGNoLndpbm5lcikge1xuICAgICAgICB3aW5zQ291bnRzW21hdGNoLndpbm5lci5pZF0gPSAod2luc0NvdW50c1ttYXRjaC53aW5uZXIuaWRdIHx8IDApICsgMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gR2F0aGVyIGFsbCB0ZWFtcyBldmVyIGluIHRoZSB0b3VybmFtZW50LCBhdHRhY2hpbmcgd2lucy9sb3NzZXNcbiAgY29uc3QgYWxsVGVhbXM6IFRlYW1bXSA9IFtdO1xuICBjb25zdCB0ZWFtSWRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGZvciAoY29uc3Qgcm91bmQgb2YgdG91cm5hbWVudC5yb3VuZHMpIHtcbiAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIHJvdW5kLm1hdGNoZXMpIHtcbiAgICAgIGlmIChtYXRjaC50ZWFtMSAmJiAhdGVhbUlkcy5oYXMobWF0Y2gudGVhbTEuaWQpKSB7XG4gICAgICAgIGFsbFRlYW1zLnB1c2goe1xuICAgICAgICAgIC4uLm1hdGNoLnRlYW0xLFxuICAgICAgICAgIHdpbnM6IHdpbnNDb3VudHNbbWF0Y2gudGVhbTEuaWRdIHx8IDAsXG4gICAgICAgICAgbG9zc2VzOiBsb3NzQ291bnRzW21hdGNoLnRlYW0xLmlkXSB8fCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0ZWFtSWRzLmFkZChtYXRjaC50ZWFtMS5pZCk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2gudGVhbTIgJiYgIXRlYW1JZHMuaGFzKG1hdGNoLnRlYW0yLmlkKSkge1xuICAgICAgICBhbGxUZWFtcy5wdXNoKHtcbiAgICAgICAgICAuLi5tYXRjaC50ZWFtMixcbiAgICAgICAgICB3aW5zOiB3aW5zQ291bnRzW21hdGNoLnRlYW0yLmlkXSB8fCAwLFxuICAgICAgICAgIGxvc3NlczogbG9zc0NvdW50c1ttYXRjaC50ZWFtMi5pZF0gfHwgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGVhbUlkcy5hZGQobWF0Y2gudGVhbTIuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElkZW50aWZ5IG5ld2x5IGVsaW1pbmF0ZWQgdGVhbXMgKDIgbG9zc2VzKVxuICBjb25zdCBuZXdseUVsaW1pbmF0ZWQ6IFRlYW1bXSA9IFtdO1xuICBmb3IgKGNvbnN0IHRlYW0gb2YgYWxsVGVhbXMpIHtcbiAgICBpZiAoXG4gICAgICAobG9zc0NvdW50c1t0ZWFtLmlkXSB8fCAwKSA+PSAyICYmXG4gICAgICAhdG91cm5hbWVudC5lbGltaW5hdGVkVGVhbXMuc29tZSgodCkgPT4gdC5pZCA9PT0gdGVhbS5pZClcbiAgICApIHtcbiAgICAgIG5ld2x5RWxpbWluYXRlZC5wdXNoKHRlYW0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdpbm5lcnM6IHRlYW1zIHdpdGggMCBsb3NzZXMgYW5kIG5vdCBlbGltaW5hdGVkXG4gIGNvbnN0IHdpbm5lcnNCcmFja2V0VGVhbXMgPSBhbGxUZWFtc1xuICAgIC5maWx0ZXIoXG4gICAgICAodGVhbSkgPT5cbiAgICAgICAgKGxvc3NDb3VudHNbdGVhbS5pZF0gfHwgMCkgPT09IDAgJiZcbiAgICAgICAgIXRvdXJuYW1lbnQuZWxpbWluYXRlZFRlYW1zLnNvbWUoKHQpID0+IHQuaWQgPT09IHRlYW0uaWQpICYmXG4gICAgICAgICFuZXdseUVsaW1pbmF0ZWQuc29tZSgodCkgPT4gdC5pZCA9PT0gdGVhbS5pZClcbiAgICApXG4gICAgLm1hcCgodGVhbSkgPT4gKHtcbiAgICAgIC4uLnRlYW0sXG4gICAgICBsb3NzZXM6IGxvc3NDb3VudHNbdGVhbS5pZF0gfHwgMCxcbiAgICAgIHdpbnM6IHdpbnNDb3VudHNbdGVhbS5pZF0gfHwgMFxuICAgIH0pKTtcblxuICAvLyBMb3NlcnM6IHRlYW1zIHdpdGggMSBsb3NzIGFuZCBub3QgZWxpbWluYXRlZFxuICBjb25zdCBsb3NlcnNCcmFja2V0VGVhbXMgPSBhbGxUZWFtc1xuICAgIC5maWx0ZXIoXG4gICAgICAodGVhbSkgPT5cbiAgICAgICAgKGxvc3NDb3VudHNbdGVhbS5pZF0gfHwgMCkgPT09IDEgJiZcbiAgICAgICAgIXRvdXJuYW1lbnQuZWxpbWluYXRlZFRlYW1zLnNvbWUoKHQpID0+IHQuaWQgPT09IHRlYW0uaWQpICYmXG4gICAgICAgICFuZXdseUVsaW1pbmF0ZWQuc29tZSgodCkgPT4gdC5pZCA9PT0gdGVhbS5pZClcbiAgICApXG4gICAgLm1hcCgodGVhbSkgPT4gKHtcbiAgICAgIC4uLnRlYW0sXG4gICAgICBsb3NzZXM6IGxvc3NDb3VudHNbdGVhbS5pZF0gfHwgMCxcbiAgICAgIHdpbnM6IHdpbnNDb3VudHNbdGVhbS5pZF0gfHwgMFxuICAgIH0pKTtcblxuICBsZXQgaXNDaGFtcGlvbnNoaXBSb3VuZCA9IGZhbHNlO1xuICBsZXQgY2hhbXBpb25zaGlwTWF0Y2hlczogTWF0Y2hbXSA9IFtdO1xuICBsZXQgbmV4dFJvdW5kTWF0Y2hlczogTWF0Y2hbXSA9IFtdO1xuXG4gIGNvbnN0IHByZXZDaGFtcGlvbnNoaXBNYXRjaGVzID0gdG91cm5hbWVudC5yb3VuZHNcbiAgICAuZmlsdGVyKChyKSA9PiByLmlzQ2hhbXBpb25zaGlwUm91bmQpXG4gICAgLmZsYXRNYXAoKHIpID0+IHIubWF0Y2hlcylcbiAgICAuZmlsdGVyKChtKSA9PiBtLmJyYWNrZXQgPT09IFwiY2hhbXBpb25zaGlwXCIpO1xuXG4gIC8vIC0tLSBDSEFNUElPTlNISVAgTE9HSUMgLS0tXG4gIC8vIElmIGEgY2hhbXBpb25zaGlwIG1hdGNoIGhhcyBiZWVuIHBsYXllZCBhbmQgY29tcGxldGVkLCBjaGVjayBpZiByZXNldCBpcyBuZWVkZWRcbiAgaWYgKFxuICAgIHByZXZDaGFtcGlvbnNoaXBNYXRjaGVzLmxlbmd0aCA+PSAxICYmXG4gICAgcHJldkNoYW1waW9uc2hpcE1hdGNoZXNbcHJldkNoYW1waW9uc2hpcE1hdGNoZXMubGVuZ3RoIC0gMV0uaXNDb21wbGV0ZWRcbiAgKSB7XG4gICAgY29uc3QgbGFzdENoYW1wTWF0Y2ggPVxuICAgICAgcHJldkNoYW1waW9uc2hpcE1hdGNoZXNbcHJldkNoYW1waW9uc2hpcE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICAgY29uc3Qgd2lubmVyc0JyYWNrZXRUZWFtID0gbGFzdENoYW1wTWF0Y2gudGVhbTE7XG4gICAgY29uc3QgbG9zZXJzQnJhY2tldFRlYW0gPSBsYXN0Q2hhbXBNYXRjaC50ZWFtMjtcblxuICAgIC8vIElmIGxvc2VyJ3MgYnJhY2tldCB0ZWFtIHdvbiB0aGUgZmlyc3QgY2hhbXBpb25zaGlwIG1hdGNoLCBzY2hlZHVsZSBhIHJlc2V0XG4gICAgaWYgKFxuICAgICAgbGFzdENoYW1wTWF0Y2gud2lubmVyPy5pZCA9PT0gbG9zZXJzQnJhY2tldFRlYW0/LmlkICYmXG4gICAgICB0b3VybmFtZW50LmNoYW1waW9uc2hpcE1hdGNoZXNQbGF5ZWQgPT09IDFcbiAgICApIHtcbiAgICAgIGlzQ2hhbXBpb25zaGlwUm91bmQgPSB0cnVlO1xuICAgICAgY2hhbXBpb25zaGlwTWF0Y2hlcy5wdXNoKFxuICAgICAgICBjcmVhdGVNYXRjaChcbiAgICAgICAgICBgQyR7bmV4dFJvdW5kTnVtYmVyfS0yYCxcbiAgICAgICAgICBuZXh0Um91bmROdW1iZXIsXG4gICAgICAgICAgd2lubmVyc0JyYWNrZXRUZWFtLFxuICAgICAgICAgIGxvc2Vyc0JyYWNrZXRUZWFtLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiY2hhbXBpb25zaGlwXCJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2hhbXBpb25zaGlwIGlzIG92ZXIsIHdpbm5lciB3aWxsIGJlIHNldCBiZWxvd1xuICAgICAgaXNDaGFtcGlvbnNoaXBSb3VuZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIElmIHdlJ3JlIHJlYWR5IGZvciB0aGUgZmlyc3QgY2hhbXBpb25zaGlwIG1hdGNoIChvbmUgdGVhbSBpbiBlYWNoIGJyYWNrZXQsIGxvc2VyJ3MgYnJhY2tldCBmaW5hbCBjb21wbGV0ZSlcbiAgZWxzZSBpZiAoXG4gICAgd2lubmVyc0JyYWNrZXRUZWFtcy5sZW5ndGggPT09IDEgJiZcbiAgICBsb3NlcnNCcmFja2V0VGVhbXMubGVuZ3RoID09PSAxICYmXG4gICAgY3VycmVudFJvdW5kLm1hdGNoZXMuc29tZShcbiAgICAgIChtKSA9PlxuICAgICAgICAobS5icmFja2V0ID09PSBcImxvc2Vyc1wiIHx8IG0uaWQuaW5jbHVkZXMoXCJMb3NlcnNMYXN0XCIpKSAmJlxuICAgICAgICBtLmlzQ29tcGxldGVkICYmXG4gICAgICAgIG0ud2lubmVyICYmXG4gICAgICAgIGxvc2Vyc0JyYWNrZXRUZWFtcy5zb21lKCh0KSA9PiB0LmlkID09PSBtLndpbm5lciEuaWQpXG4gICAgKVxuICApIHtcbiAgICBpc0NoYW1waW9uc2hpcFJvdW5kID0gdHJ1ZTtcbiAgICBjaGFtcGlvbnNoaXBNYXRjaGVzLnB1c2goXG4gICAgICBjcmVhdGVNYXRjaChcbiAgICAgICAgYEMke25leHRSb3VuZE51bWJlcn0tMWAsXG4gICAgICAgIG5leHRSb3VuZE51bWJlcixcbiAgICAgICAgd2lubmVyc0JyYWNrZXRUZWFtc1swXSxcbiAgICAgICAgbG9zZXJzQnJhY2tldFRlYW1zWzBdLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgXCJjaGFtcGlvbnNoaXBcIlxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgLy8gSWYgdGhlIHdpbm5lcidzIGJyYWNrZXQgZmluYWwgbG9zZXIgbmVlZHMgdG8gcGxheSB0aGUgbG9zZXIncyBicmFja2V0IHdpbm5lclxuICBlbHNlIGlmIChcbiAgICB3aW5uZXJzQnJhY2tldFRlYW1zLmxlbmd0aCA9PT0gMSAmJlxuICAgIGxvc2Vyc0JyYWNrZXRUZWFtcy5sZW5ndGggPj0gMSAmJlxuICAgIHRvdXJuYW1lbnQud2lubmVyc0JyYWNrZXRGaW5hbExvc2VyXG4gICkge1xuICAgIGNvbnN0IGxvc2Vyc0JyYWNrZXRXaW5uZXIgPSBjdXJyZW50Um91bmQubWF0Y2hlc1xuICAgICAgLmZpbHRlcigobSkgPT4gbS5icmFja2V0ID09PSBcImxvc2Vyc1wiICYmIG0uaXNDb21wbGV0ZWQgJiYgbS53aW5uZXIpXG4gICAgICAubWFwKChtKSA9PiBtLndpbm5lciEpXG4gICAgICAuZmluZCgod2lubmVyKSA9PiBsb3NlcnNCcmFja2V0VGVhbXMuc29tZSgodCkgPT4gdC5pZCA9PT0gd2lubmVyLmlkKSk7XG5cbiAgICBpZiAoXG4gICAgICBsb3NlcnNCcmFja2V0V2lubmVyICYmXG4gICAgICBsb3NlcnNCcmFja2V0V2lubmVyLmlkICE9PSB0b3VybmFtZW50Lndpbm5lcnNCcmFja2V0RmluYWxMb3Nlci5pZFxuICAgICkge1xuICAgICAgbmV4dFJvdW5kTWF0Y2hlcy5wdXNoKFxuICAgICAgICBjcmVhdGVNYXRjaChcbiAgICAgICAgICBgTG9zZXJzTGFzdC0ke25leHRSb3VuZE51bWJlcn1gLFxuICAgICAgICAgIG5leHRSb3VuZE51bWJlcixcbiAgICAgICAgICB0b3VybmFtZW50Lndpbm5lcnNCcmFja2V0RmluYWxMb3NlcixcbiAgICAgICAgICBsb3NlcnNCcmFja2V0V2lubmVyLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwibG9zZXJzXCJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlU3RhbmRhcmRCcmFja2V0TWF0Y2hlcygpO1xuICAgIH1cbiAgfVxuICAvLyBJZiB0aGlzIGlzIHRoZSB3aW5uZXIncyBicmFja2V0IGZpbmFsIChleGFjdGx5IDIgdGVhbXMgaW4gd2lubmVyJ3MgYnJhY2tldClcbiAgZWxzZSBpZiAod2lubmVyc0JyYWNrZXRUZWFtcy5sZW5ndGggPT09IDIgJiYgbG9zZXJzQnJhY2tldFRlYW1zLmxlbmd0aCA+PSAxKSB7XG4gICAgbmV4dFJvdW5kTWF0Y2hlcy5wdXNoKFxuICAgICAgY3JlYXRlTWF0Y2goXG4gICAgICAgIGBXJHtuZXh0Um91bmROdW1iZXJ9LTFgLFxuICAgICAgICBuZXh0Um91bmROdW1iZXIsXG4gICAgICAgIHdpbm5lcnNCcmFja2V0VGVhbXNbMF0sXG4gICAgICAgIHdpbm5lcnNCcmFja2V0VGVhbXNbMV0sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIndpbm5lcnNcIlxuICAgICAgKVxuICAgICk7XG4gICAgY3JlYXRlTG9zZXJzQnJhY2tldE1hdGNoZXMoKTtcbiAgfVxuICAvLyBPdGhlcndpc2UsIGNvbnRpbnVlIHdpdGggc3RhbmRhcmQgYnJhY2tldCBwbGF5XG4gIGVsc2Uge1xuICAgIGNyZWF0ZVN0YW5kYXJkQnJhY2tldE1hdGNoZXMoKTtcbiAgfVxuXG4gIC8vIC0tLSBIZWxwZXI6IFN0YW5kYXJkIFdpbm5lcnMgQnJhY2tldCBNYXRjaGVzIC0tLVxuICBmdW5jdGlvbiBjcmVhdGVTdGFuZGFyZEJyYWNrZXRNYXRjaGVzKCkge1xuICAgIGxldCBtYXRjaENvdW50ZXIgPSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lubmVyc0JyYWNrZXRUZWFtcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgY29uc3QgdGVhbTEgPSB3aW5uZXJzQnJhY2tldFRlYW1zW2ldO1xuICAgICAgY29uc3QgdGVhbTIgPSB3aW5uZXJzQnJhY2tldFRlYW1zW2kgKyAxXSA/PyBudWxsO1xuICAgICAgY29uc3QgaXNCeWUgPSAhdGVhbTI7XG4gICAgICBuZXh0Um91bmRNYXRjaGVzLnB1c2goXG4gICAgICAgIGNyZWF0ZU1hdGNoKFxuICAgICAgICAgIGBXJHtuZXh0Um91bmROdW1iZXJ9LSR7bWF0Y2hDb3VudGVyfWAsXG4gICAgICAgICAgbmV4dFJvdW5kTnVtYmVyLFxuICAgICAgICAgIHRlYW0xLFxuICAgICAgICAgIHRlYW0yLFxuICAgICAgICAgIGlzQnllLFxuICAgICAgICAgIFwid2lubmVyc1wiXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBtYXRjaENvdW50ZXIrKztcbiAgICB9XG4gICAgY3JlYXRlTG9zZXJzQnJhY2tldE1hdGNoZXMoKTtcbiAgfVxuXG4gIC8vIC0tLSBIZWxwZXI6IExvc2VycyBCcmFja2V0IE1hdGNoZXMgLS0tXG4gIGZ1bmN0aW9uIGNyZWF0ZUxvc2Vyc0JyYWNrZXRNYXRjaGVzKCkge1xuICAgIGNvbnN0IGVsaWdpYmxlTG9zZXJzID0gYWxsVGVhbXMuZmlsdGVyKFxuICAgICAgKHRlYW0pID0+XG4gICAgICAgIChsb3NzQ291bnRzW3RlYW0uaWRdIHx8IDApID09PSAxICYmXG4gICAgICAgICF0b3VybmFtZW50LmVsaW1pbmF0ZWRUZWFtcy5zb21lKCh0KSA9PiB0LmlkID09PSB0ZWFtLmlkKSAmJlxuICAgICAgICAhbmV3bHlFbGltaW5hdGVkLnNvbWUoKHQpID0+IHQuaWQgPT09IHRlYW0uaWQpICYmXG4gICAgICAgICEodG91cm5hbWVudC53aW5uZXJzQnJhY2tldEZpbmFsTG9zZXIgJiYgdG91cm5hbWVudC53aW5uZXJzQnJhY2tldEZpbmFsTG9zZXIuaWQgPT09IHRlYW0uaWQpXG4gICAgKTtcbiAgICBjb25zdCBqdXN0RHJvcHBlZEZyb21XaW5uZXJzID0gY3VycmVudFJvdW5kLm1hdGNoZXNcbiAgICAgIC5maWx0ZXIoKG0pID0+IG0uYnJhY2tldCA9PT0gXCJ3aW5uZXJzXCIgJiYgbS5sb3NlciAmJiBtLmlzQ29tcGxldGVkKVxuICAgICAgLm1hcCgobSkgPT4gbS5sb3NlciEpXG4gICAgICAuZmlsdGVyKChsb3NlcikgPT4gZWxpZ2libGVMb3NlcnMuc29tZSgodCkgPT4gdC5pZCA9PT0gbG9zZXIuaWQpKTtcbiAgICAvLyBJZiB0aGlzIGlzIHRoZSB3aW5uZXIncyBicmFja2V0IGZpbmFsLCBzdG9yZSB0aGUgbG9zZXIgZm9yIGxhdGVyIHVzZVxuICAgIGlmIChcbiAgICAgIGN1cnJlbnRSb3VuZC5tYXRjaGVzLnNvbWUoXG4gICAgICAgIChtKSA9PlxuICAgICAgICAgIG0uYnJhY2tldCA9PT0gXCJ3aW5uZXJzXCIgJiZcbiAgICAgICAgICB3aW5uZXJzQnJhY2tldFRlYW1zLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgIG0ubG9zZXIgJiZcbiAgICAgICAgICBtLmlzQ29tcGxldGVkXG4gICAgICApXG4gICAgKSB7XG4gICAgICBjb25zdCB3aW5uZXJzRmluYWxMb3NlciA9IGN1cnJlbnRSb3VuZC5tYXRjaGVzXG4gICAgICAgIC5maWx0ZXIoKG0pID0+IG0uYnJhY2tldCA9PT0gXCJ3aW5uZXJzXCIgJiYgbS5pc0NvbXBsZXRlZCAmJiBtLmxvc2VyKVxuICAgICAgICAubWFwKChtKSA9PiBtLmxvc2VyISlcbiAgICAgICAgLnBvcCgpO1xuICAgICAgaWYgKHdpbm5lcnNGaW5hbExvc2VyKSB7XG4gICAgICAgIHRvdXJuYW1lbnQud2lubmVyc0JyYWNrZXRGaW5hbExvc2VyID0gd2lubmVyc0ZpbmFsTG9zZXI7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV4aXN0aW5nTG9zZXJzID0gZWxpZ2libGVMb3NlcnMuZmlsdGVyKFxuICAgICAgKHQpID0+ICFqdXN0RHJvcHBlZEZyb21XaW5uZXJzLnNvbWUoKGpkKSA9PiBqZC5pZCA9PT0gdC5pZClcbiAgICApO1xuICAgIGNvbnN0IG9yZGVyZWRMb3NlcnMgPSBbLi4uanVzdERyb3BwZWRGcm9tV2lubmVycywgLi4uZXhpc3RpbmdMb3NlcnNdO1xuICAgIGlmIChvcmRlcmVkTG9zZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChvcmRlcmVkTG9zZXJzLmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICAgICAgbGV0IHRlYW1XaXRoQnllOiBUZWFtIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGlmIChqdXN0RHJvcHBlZEZyb21XaW5uZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0ZWFtV2l0aEJ5ZSA9IGp1c3REcm9wcGVkRnJvbVdpbm5lcnNbanVzdERyb3BwZWRGcm9tV2lubmVycy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBjb25zdCBieWVJbmRleCA9IG9yZGVyZWRMb3NlcnMuZmluZEluZGV4KCh0KSA9PiB0LmlkID09PSB0ZWFtV2l0aEJ5ZSEuaWQpO1xuICAgICAgICAgIGlmIChieWVJbmRleCAhPT0gLTEpIG9yZGVyZWRMb3NlcnMuc3BsaWNlKGJ5ZUluZGV4LCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZWFtV2l0aEJ5ZSA9IG9yZGVyZWRMb3NlcnMuc2hpZnQoKSE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFJvdW5kTWF0Y2hlcy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZU1hdGNoKFxuICAgICAgICAgICAgYEwke25leHRSb3VuZE51bWJlcn0tMWAsXG4gICAgICAgICAgICBuZXh0Um91bmROdW1iZXIsXG4gICAgICAgICAgICB0ZWFtV2l0aEJ5ZSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgXCJsb3NlcnNcIlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmRlcmVkTG9zZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgY29uc3QgdGVhbTEgPSBvcmRlcmVkTG9zZXJzW2ldO1xuICAgICAgICAgIGNvbnN0IHRlYW0yID0gb3JkZXJlZExvc2Vyc1tpICsgMV0gPz8gbnVsbDtcbiAgICAgICAgICBuZXh0Um91bmRNYXRjaGVzLnB1c2goXG4gICAgICAgICAgICBjcmVhdGVNYXRjaChcbiAgICAgICAgICAgICAgYEwke25leHRSb3VuZE51bWJlcn0tJHtNYXRoLmZsb29yKGkgLyAyKSArIDJ9YCxcbiAgICAgICAgICAgICAgbmV4dFJvdW5kTnVtYmVyLFxuICAgICAgICAgICAgICB0ZWFtMSxcbiAgICAgICAgICAgICAgdGVhbTIsXG4gICAgICAgICAgICAgICF0ZWFtMixcbiAgICAgICAgICAgICAgXCJsb3NlcnNcIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJlZExvc2Vycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgIGNvbnN0IHRlYW0xID0gb3JkZXJlZExvc2Vyc1tpXTtcbiAgICAgICAgICBjb25zdCB0ZWFtMiA9IG9yZGVyZWRMb3NlcnNbaSArIDFdID8/IG51bGw7XG4gICAgICAgICAgbmV4dFJvdW5kTWF0Y2hlcy5wdXNoKFxuICAgICAgICAgICAgY3JlYXRlTWF0Y2goXG4gICAgICAgICAgICAgIGBMJHtuZXh0Um91bmROdW1iZXJ9LSR7TWF0aC5mbG9vcihpIC8gMikgKyAxfWAsXG4gICAgICAgICAgICAgIG5leHRSb3VuZE51bWJlcixcbiAgICAgICAgICAgICAgdGVhbTEsXG4gICAgICAgICAgICAgIHRlYW0yLFxuICAgICAgICAgICAgICAhdGVhbTIsXG4gICAgICAgICAgICAgIFwibG9zZXJzXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tIFdpbm5lciBkZXRlY3Rpb24gbG9naWMgLS0tXG4gIGxldCB3aW5uZXI6IFRlYW0gfCB1bmRlZmluZWQgPSB0b3VybmFtZW50Lndpbm5lcjtcbiAgaWYgKGlzQ2hhbXBpb25zaGlwUm91bmQpIHtcbiAgICBjb25zdCBsYXN0Q2hhbXBNYXRjaCA9XG4gICAgICBjaGFtcGlvbnNoaXBNYXRjaGVzWzBdIHx8XG4gICAgICBwcmV2Q2hhbXBpb25zaGlwTWF0Y2hlc1twcmV2Q2hhbXBpb25zaGlwTWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoXG4gICAgICBsYXN0Q2hhbXBNYXRjaCAmJlxuICAgICAgbGFzdENoYW1wTWF0Y2guaXNDb21wbGV0ZWQgJiZcbiAgICAgIGxhc3RDaGFtcE1hdGNoLndpbm5lciAmJlxuICAgICAgbGFzdENoYW1wTWF0Y2gubG9zZXJcbiAgICApIHtcbiAgICAgIGNvbnN0IHdpbm5lcnNCcmFja2V0VGVhbSA9IGxhc3RDaGFtcE1hdGNoLnRlYW0xO1xuICAgICAgY29uc3QgbG9zZXJzQnJhY2tldFRlYW0gPSBsYXN0Q2hhbXBNYXRjaC50ZWFtMjtcbiAgICAgIGNvbnN0IGxvc2Vyc0JyYWNrZXRUZWFtV29uID1cbiAgICAgICAgbG9zZXJzQnJhY2tldFRlYW0gJiYgbGFzdENoYW1wTWF0Y2gud2lubmVyLmlkID09PSBsb3NlcnNCcmFja2V0VGVhbS5pZDtcbiAgICAgIGlmIChsb3NlcnNCcmFja2V0VGVhbVdvbiAmJiB0b3VybmFtZW50LmNoYW1waW9uc2hpcE1hdGNoZXNQbGF5ZWQgPT09IDEpIHtcbiAgICAgICAgd2lubmVyID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2lubmVyID0gbGFzdENoYW1wTWF0Y2gud2lubmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLSBJTkZJTklURSBSRUNVUlNJT04gR1VBUkQgLS0tXG4gIGNvbnN0IG5vTW9yZU1hdGNoZXMgPVxuICAgIChpc0NoYW1waW9uc2hpcFJvdW5kICYmIGNoYW1waW9uc2hpcE1hdGNoZXMubGVuZ3RoID09PSAwKSB8fFxuICAgICghaXNDaGFtcGlvbnNoaXBSb3VuZCAmJiBuZXh0Um91bmRNYXRjaGVzLmxlbmd0aCA9PT0gMCk7XG4gIGlmIChub01vcmVNYXRjaGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRvdXJuYW1lbnQsXG4gICAgICB3aW5uZXIsXG4gICAgICBjdXJyZW50Um91bmQ6IHRvdXJuYW1lbnQuY3VycmVudFJvdW5kXG4gICAgfTtcbiAgfVxuXG4gIC8vIC0tLSBDb21wb3NlIG5ldyB0b3VybmFtZW50IG9iamVjdCAtLS1cbiAgcmV0dXJuIHtcbiAgICAuLi50b3VybmFtZW50LFxuICAgIHJvdW5kczogW1xuICAgICAgLi4udG91cm5hbWVudC5yb3VuZHMsXG4gICAgICB7XG4gICAgICAgIHJvdW5kTnVtYmVyOiBuZXh0Um91bmROdW1iZXIsXG4gICAgICAgIG1hdGNoZXM6IGlzQ2hhbXBpb25zaGlwUm91bmQgPyBjaGFtcGlvbnNoaXBNYXRjaGVzIDogbmV4dFJvdW5kTWF0Y2hlcyxcbiAgICAgICAgaXNEb3VibGVFbGltaW5hdGlvbjogdHJ1ZSxcbiAgICAgICAgaXNDaGFtcGlvbnNoaXBSb3VuZFxuICAgICAgfVxuICAgIF0sXG4gICAgY3VycmVudFJvdW5kOiBuZXh0Um91bmROdW1iZXIsXG4gICAgZWxpbWluYXRlZFRlYW1zOiBbXG4gICAgICAuLi50b3VybmFtZW50LmVsaW1pbmF0ZWRUZWFtcyxcbiAgICAgIC4uLm5ld2x5RWxpbWluYXRlZC5maWx0ZXIoXG4gICAgICAgICh0KSA9PiAhdG91cm5hbWVudC5lbGltaW5hdGVkVGVhbXMuc29tZSgoZXQpID0+IGV0LmlkID09PSB0LmlkKVxuICAgICAgKVxuICAgIF0sXG4gICAgY2hhbXBpb25zaGlwTWF0Y2hlc1BsYXllZDogaXNDaGFtcGlvbnNoaXBSb3VuZFxuICAgICAgPyB0b3VybmFtZW50LmNoYW1waW9uc2hpcE1hdGNoZXNQbGF5ZWQgKyAxXG4gICAgICA6IHRvdXJuYW1lbnQuY2hhbXBpb25zaGlwTWF0Y2hlc1BsYXllZCxcbiAgICB3aW5uZXJzQnJhY2tldEZpbmFsTG9zZXI6IHRvdXJuYW1lbnQud2lubmVyc0JyYWNrZXRGaW5hbExvc2VyLFxuICAgIHdpbm5lclxuICB9O1xufTtcblxuIl0sIm5hbWVzIjpbImNyZWF0ZU1hdGNoIiwiaWQiLCJyb3VuZE51bWJlciIsInRlYW0xIiwidGVhbTIiLCJpc0J5ZSIsImJyYWNrZXQiLCJuZXh0TWF0Y2hJZCIsIm5leHRMb3Nlck1hdGNoSWQiLCJpc0NvbXBsZXRlZCIsIndpbm5lciIsInVuZGVmaW5lZCIsImxvc2VyIiwic2NvcmUiLCJ0ZWFtMVNjb3JlIiwidGVhbTJTY29yZSIsImVsaW1pbmF0ZWRMYWJlbCIsImNyZWF0ZUluaXRpYWxSb3VuZHMiLCJ0ZWFtcyIsIm51bVRlYW1zIiwibGVuZ3RoIiwibWF0Y2hlcyIsIm51bVJvdW5kcyIsIk1hdGgiLCJjZWlsIiwibG9nMiIsImZpcnN0Um91bmRNYXRjaGVzIiwicG93IiwibWF0Y2hDb3VudGVyIiwiaSIsIm1hdGNoSWQiLCJwdXNoIiwicm91bmRzIiwiaXNEb3VibGVFbGltaW5hdGlvbiIsImlzQ2hhbXBpb25zaGlwUm91bmQiLCJjdXJyZW50Um91bmQiLCJlbGltaW5hdGVkVGVhbXMiLCJjaGFtcGlvbnNoaXBNYXRjaGVzUGxheWVkIiwidXBkYXRlTWF0Y2hTY29yZSIsIm1hdGNoIiwibmV3U2NvcmUiLCJ3aW5zIiwibG9zc2VzIiwiZGVkdXBlVGVhbXMiLCJzZWVuIiwiU2V0IiwiZmlsdGVyIiwidGVhbSIsImhhcyIsImFkZCIsInRlYW1zV2l0aExvc3NlcyIsImxvc3NDb3VudHMiLCJuIiwiT2JqZWN0Iiwia2V5cyIsInRlYW1JZCIsImFkdmFuY2VUb05leHRSb3VuZCIsInRvdXJuYW1lbnQiLCJuZXh0Um91bmROdW1iZXIiLCJ3aW5zQ291bnRzIiwiZm9yRWFjaCIsInJvdW5kIiwiYWxsVGVhbXMiLCJ0ZWFtSWRzIiwibmV3bHlFbGltaW5hdGVkIiwic29tZSIsInQiLCJ3aW5uZXJzQnJhY2tldFRlYW1zIiwibWFwIiwibG9zZXJzQnJhY2tldFRlYW1zIiwiY2hhbXBpb25zaGlwTWF0Y2hlcyIsIm5leHRSb3VuZE1hdGNoZXMiLCJwcmV2Q2hhbXBpb25zaGlwTWF0Y2hlcyIsInIiLCJmbGF0TWFwIiwibSIsImxhc3RDaGFtcE1hdGNoIiwid2lubmVyc0JyYWNrZXRUZWFtIiwibG9zZXJzQnJhY2tldFRlYW0iLCJpbmNsdWRlcyIsIndpbm5lcnNCcmFja2V0RmluYWxMb3NlciIsImxvc2Vyc0JyYWNrZXRXaW5uZXIiLCJmaW5kIiwiY3JlYXRlU3RhbmRhcmRCcmFja2V0TWF0Y2hlcyIsImNyZWF0ZUxvc2Vyc0JyYWNrZXRNYXRjaGVzIiwiZWxpZ2libGVMb3NlcnMiLCJqdXN0RHJvcHBlZEZyb21XaW5uZXJzIiwid2lubmVyc0ZpbmFsTG9zZXIiLCJwb3AiLCJleGlzdGluZ0xvc2VycyIsImpkIiwib3JkZXJlZExvc2VycyIsInRlYW1XaXRoQnllIiwiYnllSW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJzaGlmdCIsImZsb29yIiwibG9zZXJzQnJhY2tldFRlYW1Xb24iLCJub01vcmVNYXRjaGVzIiwiZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types/tournament/matches.ts\n"));

/***/ })

});